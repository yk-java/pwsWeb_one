<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.glens.pwCloudOs.pm.memberMove.dao.MemberMoveVoMapper" >
 
 
  <select id="queryForCount" parameterType="java.util.HashMap" resultType="int">
  	select count(*) 
	from pm_member_move p
	left join md_employee m on m.EMPLOYEECODE = p.EMPLOYEECODE
	left join md_employee_job j on j.JOB_CODE=p.JOB_CODE1
	left join md_employee_job k on k.JOB_CODE=p.JOB_CODE2
	where 1=1
	<if test="status!=null and status!=''">
		and p.IS_FINISH=#{status}
	</if>
	<if test="employeeName != null and employeeName != ''">
	  and  m.EMPLOYEENAME like "%"#{employeeName}"%"
    </if>
	<if test="proNo1 != null and proNo1!=''">
  		and p.PRO_NO1=#{proNo1}
  	</if>
  	<if test="fromDate != null and fromDate != ''">
	  	and p.MOVE_DATE &gt;= #{fromDate}
    </if>
	<if test="toDate != null and toDate != ''">
	  	and p.MOVE_DATE &lt;= #{toDate}
	</if>
	
	

  </select>
  
  <select id="queryForPage" parameterType="java.util.HashMap" resultType="map">
  	select p.FILE_NO fileNo,p.employeecode,m.EMPLOYEENAME employeename,p.PRO_NAME1 proName1,p.PRO_NAME2 proName2,j.JOB_NAME jobName1,
  	k.JOB_NAME jobName2,p.MOVE_CHAR movechar,DATE_FORMAT(p.MOVE_DATE,'%Y-%m-%d') movedate,DATE_FORMAT(p.VALID_DATE,'%Y-%m-%d') validdate,p.MOVE_YEAR moveyear,
  	p.MOVE_MONTH movemonth,p.MOVE_TYPE moveType,p.IS_FINISH isFinish,p.MOVE_CODE  moveCode
  	from pm_member_move p
	left join md_employee m on m.EMPLOYEECODE = p.EMPLOYEECODE
	left join md_employee_job j on j.JOB_CODE=p.JOB_CODE1
	left join md_employee_job k on k.JOB_CODE=p.JOB_CODE2
	where 1=1
	
	<if test="status!=null and status!=''">
		and p.IS_FINISH=#{status}
	</if>
	<if test="employeeName != null and employeeName != ''">
	  and  m.EMPLOYEENAME like "%"#{employeeName}"%"
    </if>
	
	<if test="proNo1 != null and proNo1!=''">
  		and p.PRO_NO1=#{proNo1}
  	</if>
  	
  	
  	<if test="fromDate != null and fromDate != ''">
	  	and p.MOVE_DATE &gt;= #{fromDate}
    </if>
	<if test="toDate != null and toDate != ''">
	  	and p.MOVE_DATE &lt;= #{toDate}
	</if>
	
	order by p.rowid desc
  	
  	limit #{firstResult},#{maxResult}
	
  </select>
  
  <select id="queryForList" parameterType="java.util.HashMap" resultType="map">
  	set @mycnt=0;
  	select 
  		(@mycnt:=@mycnt+1) as rowindex, p.FILE_NO fileNo,p.employeecode,m.EMPLOYEENAME employeename,p.PRO_NAME1 proName1,p.PRO_NAME2 proName2,j.JOB_NAME jobName1,
  	k.JOB_NAME jobName2,case p.MOVE_CHAR when 1 then '平调' when 2 then '晋升' when 3 then '降级' end movechar,
  	DATE_FORMAT(p.MOVE_DATE,'%Y-%m-%d') movedate,DATE_FORMAT(p.VALID_DATE,'%Y-%m-%d') validdate,
  	concat('',p.MOVE_YEAR,p.MOVE_MONTH) movemonth,p.MOVE_TYPE moveType,case p.IS_FINISH when 0 then '进行中' else '已完成' end isFinish,p.MOVE_CODE  moveCode,l.PROCESSOR_NAME,l.PROCESS_TIME
  	from pm_member_move p
	left join md_employee m on m.EMPLOYEECODE = p.EMPLOYEECODE
	left join md_employee_job j on j.JOB_CODE=p.JOB_CODE1
	left join md_employee_job k on k.JOB_CODE=p.JOB_CODE2
	join pm_member_move_proc l on l.MOVE_CODE=p.MOVE_CODE
	where 1=1 
	and l.SYS_PROCESS_FLAG=0
	<if test="employeeName != null and employeeName != ''">
	  and  m.EMPLOYEENAME like "%"#{employeeName}"%"
    </if>
	
	<if test="proNo1 != null and proNo1!=''">
  		and p.PRO_NO1=#{proNo1}
  	</if>
  	
  	
  	<if test="fromDate != null and fromDate != ''">
	  	and p.MOVE_DATE &gt;= #{fromDate}
    </if>
	<if test="toDate != null and toDate != ''">
	  	and p.MOVE_DATE &lt;= #{toDate}
	</if>
  </select>
  
  
  <insert id="insert" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
		insert into pm_member_move(FILE_NO,COMPANY_CODE,EMPLOYEECODE,
		PRO_NO1,PRO_NAME1,JOB_CODE1,PRO_NO2,PRO_NAME2,JOB_CODE2,
		MOVE_CHAR,MOVE_DATE,VALID_DATE,MOVE_YEAR,MOVE_MONTH,SYS_CREATE_TIME,IS_FINISH,MOVE_TYPE,REMARKS,MOVE_CODE,PROC_STATUS)
		VALUES(#{fileNo},#{companyCode},#{employeeCode},#{proNo1},#{proName1},#{jobCode1},
		#{proNo2},#{proName2},#{jobCode2},#{moveChar},#{moveDate},
		#{validDate},#{moveYear},#{moveMonth},now(),#{isFinish},#{moveType},#{remarks},#{moveCode},#{procStatus})
  </insert>
  
   <update id="update" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo" >
   		update pm_member set work_statue=2,OUT_DATE=#{validDate} where 
		PRO_NO=#{proNo1} and employeecode=#{employeeCode} and work_statue=1
   </update>
   
   <update id="updateFinish" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo">
   		update pm_member_move set is_finish=1 where rowid=#{rowid}
   </update>
   
   <insert id="insertPmMember" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo" >
		insert into pm_member(company_code,pro_no,employeecode,in_date,work_statue) 
		values(#{companyCode},#{proNo2},#{employeeCode},#{validDate},1)
		
   </insert>
   
   <select id="getJobs" parameterType="java.util.HashMap" resultType="java.util.HashMap">
   		select job_code jobCode,job_name jobName from md_employee_job
   </select>
   
   <select id="memberMoveIn" parameterType="map" resultType="map">
   		select * from (
   		select count(p.pro_no2) num,p.pro_name2 name  from pm_member_move p
		left join pm_base b on p.pro_no2=b.pro_no
		where 1=1 
		<if test="areaName != null and areaName != ''">
			and (b.city=#{areaName} or b.PROVINCE=#{areaName} or b.DISTRICT=#{areaName}) 
		</if>
		<if test="fromDate != null and fromDate != ''">
			and p.move_date &gt;= #{fromDate} 
		</if>
		<if test="toDate != null and toDate != ''">
			and p.move_date &lt;=#{toDate}
		</if>
		group by p.pro_no2
		) temp order by num desc
   </select>
   
   <select id="memberMoveOut" parameterType="map" resultType="map">
   		select * from (
   		select count(p.pro_no1) num,p.pro_name1 name  from pm_member_move p
		left join pm_base b on p.pro_no1=b.pro_no
		where 1=1 
		<if test="areaName != null and areaName != ''">
			and (b.city=#{areaName} or b.PROVINCE=#{areaName} or b.DISTRICT=#{areaName}) 
		</if>
		<if test="fromDate != null and fromDate != ''">
			and p.move_date &gt;= #{fromDate} 
		</if>
		<if test="toDate != null and toDate != ''">
			and p.move_date &lt;=#{toDate}
		</if>
		group by p.pro_no1
		) temp order by num desc
   </select>
   
   <select id="memberMoveChar" parameterType="map" resultType="map">
   		select case p.move_char when '1' then '平调' when '2' then '升调' else '降调' end name,count(p.move_char) value  from pm_member_move p
		left join pm_base b on p.pro_no1=b.pro_no
		where 1=1
		<if test="areaName != null and areaName != ''">
			and (b.city=#{areaName} or b.PROVINCE=#{areaName} or b.DISTRICT=#{areaName}) 
		</if>
		<if test="fromDate != null and fromDate != ''">
			and p.move_date &gt;= #{fromDate} 
		</if>
		<if test="toDate != null and toDate != ''">
			and p.move_date &lt;=#{toDate}
		</if>
		group by p.move_char
		
   </select>
   
   <select id="memberMoves" parameterType="map" resultType="map">
   		select * from (
   		select  count(p.employeecode) num,p.employeecode,m.employeename name   from pm_member_move p
		left join pm_base b on p.pro_no1=b.pro_no
		left join md_employee m on m.employeecode=p.employeecode
		where 1=1 
		<if test="areaName != null and areaName != ''">
			and (b.city=#{areaName} or b.PROVINCE=#{areaName} or b.DISTRICT=#{areaName}) 
		</if>
		<if test="fromDate != null and fromDate != ''">
			and p.move_date &gt;= #{fromDate} 
		</if>
		<if test="toDate != null and toDate != ''">
			and p.move_date &lt;=#{toDate}
		</if>
		group by p.employeecode
		)temp order by num desc

		
   </select>
   
    <select id="getMovelist" parameterType="map" resultType="map">
   		
		select rowid,move_code moveCode,company_code companycode,employeecode employeecode,pro_no1 prono1,pro_no2 prono2,valid_date,JOB_CODE1 job1,JOB_CODE2 job2,MOVE_TYPE moveType,REMARKS remarks from pm_member_move where is_finish=0 
		and valid_date=curdate()

   </select>
   
    <select id="getMovelist1" parameterType="map" resultType="map">
   		
		select rowid,company_code companycode,employeecode employeecode,pro_no1 prono1,pro_no2 prono2,valid_date,JOB_CODE1 job1,JOB_CODE2 job2,MOVE_TYPE moveType,REMARKS remarks from pm_member_move 
		where is_finish=0  and  move_code=#{moveCode}

   </select>
   
   <!-- 部门调项目 -->
   <update id="updateEmployeeCode" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo">
   		update md_employee set unit_code=#{remarks},JOB_CLASS1='2',JOB_CODE=#{jobCode2}
		where EMPLOYEECODE=#{employeeCode}
   </update>
    <!-- 项目调部门-->
   <update id="updateEmployeeCode1" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo">
   		update md_employee set unit_code=#{proNo2},JOB_CLASS1='1',JOB_CODE=#{jobCode2}
		where EMPLOYEECODE=#{employeeCode}
   </update>
 
   
    <!-- 项目内调用  更新职务 -->
   <update id="updateProEmployeeCode" parameterType="com.glens.pwCloudOs.pm.memberMove.vo.PmMemberMoveVo">
   		update md_employee set JOB_CODE=#{jobCode2}
		where EMPLOYEECODE=#{employeeCode}
   </update>
   
   
   <insert id="insertProc" parameterType="map">
   		insert into PM_MEMBER_MOVE_PROC(COMPANY_CODE,MOVE_CODE,NODE_NAME,PROCESSOR_CODE,PROCESSOR_NAME,PROCESS_TIME,SYS_CREATE_TIME,SYS_PROCESS_FLAG,NODE_ORDER)
		VALUES(#{companyCode},#{moveCode},#{nodeName},#{processorCode},#{processorName},#{processTime},now(),#{sysProcessFlag},#{nodeOrder})
   </insert>
   
  
  
  <select id="getmanagerinpro" parameterType="map" resultType="map">
  	select p.PRO_NAME1,p.PRO_NO1,b.EMPLOYEECODE employeecode,b.PRO_MANAGER promanager from pm_member_move p
	left join pm_base b on p.PRO_NO1=b.PRO_NO
	where p.MOVE_CODE=#{moveCode}
  </select>
  
  <select id="getmanageroutpro" parameterType="map" resultType="map">
  	select p.PRO_NAME2,p.PRO_NO2,b.EMPLOYEECODE employeecode,b.PRO_MANAGER promanager from pm_member_move p
	left join pm_base b on p.PRO_NO2=b.PRO_NO
	where p.MOVE_CODE=#{moveCode}
  </select>
  
  <update id="updateProc" parameterType="map">
  	update pm_member_move_proc set SYS_PROCESS_FLAG='1'
	where MOVE_CODE=#{moveCode}
  </update>
  
  <update id="updateProcStatus" parameterType="map">
  	update pm_member_move set PROC_STATUS=#{procStatus} where MOVE_CODE=#{moveCode}
  </update>
  
  <select id="getListByCode" parameterType="map" resultType="map">
	
  	
  	
	
	select a.*,m.EMPLOYEENAME,j.JOB_NAME jobName1,g.JOB_NAME jobName2 from(
	select p.COMPANY_CODE,p.EMPLOYEECODE,p.FILE_NO,p.PRO_NO1,p.PRO_NAME1,p.PRO_NO2,p.PRO_NAME2,p.PROC_STATUS,
	p.MOVE_CODE,p.MOVE_DATE,p.VALID_DATE,p.MOVE_TYPE,p.JOB_CODE1,p.JOB_CODE2 from pm_member_move p
	join  pm_member_move_proc m on p.MOVE_CODE=m.MOVE_CODE 
	
	where m.processor_code=#{employeeCode} and m.sys_process_flag=0 
	<if test="proNo1 != null and proNo1!=''">
		and  (p.PRO_NO1=#{proNo1} or p.PRO_NO2=#{proNo1} )
	</if>
	<if test="fromDate != null and fromDate != ''">
	  	and p.MOVE_DATE &gt;= #{fromDate}
    </if>
	<if test="toDate != null and toDate != ''">
	  	and p.MOVE_DATE &lt;= #{toDate}
	</if>
	
	) a left join md_employee m on m.EMPLOYEECODE=a.EMPLOYEECODE
	left join md_employee_job j on j.JOB_CODE=a.JOB_CODE1
	left join md_employee_job g on g.JOB_CODE=a.JOB_CODE2
	
	where 1=1 
	<if test="employeeName != null and employeeName != ''">
	  and m.EMPLOYEENAME like "%"#{employeeName}"%"
    </if>
	
	
	
	
  </select>
  
  <select id="getDetailProc"  parameterType="map" resultType="map">
  	 select COMPANY_CODE,MOVE_CODE,NODE_NAME,NODE_ORDER,SYS_PROCESS_FLAG,PROCESSOR_CODE,PROCESSOR_NAME,PROCESS_TIME 
  	 from pm_member_move_proc where MOVE_CODE=#{moveCode}  order by NODE_ORDER
  	 
  	 
     
  </select>
  
  <select id="employeeAges" parameterType="map" resultType="map">
  
		
		select *,count(a.status1) total,(count(a.status1)/total2)*100  rate from(
		select 
		case when year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=25 then 1 
		when 26 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) and year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=30 then 2
		when 31 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) and year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=35 then 3
		when 36 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) and year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=40 then 4
		when 41 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) and year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=45 then 5
		when 46 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) and year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=50 then 6
		when 51 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) and year( from_days( datediff( now( ), m.BIRTHDAY)))&lt;=55 then 7
		when 56 &lt;=year( from_days( datediff( now( ), m.BIRTHDAY))) then 8
		end status1 from md_employee m
		left join md_org_unit u on u.UNIT_CODE=m.UNIT_CODE
		where m.BIRTHDAY is not null  and m.SYS_PROCESS_FLAG='1' AND m.work_status='1'
		
		<if test="unitCode != null and unitCode != ''">
		  and m.UNIT_CODE=#{unitCode}
	    </if>
	    
		) a,(SELECT COUNT(*) total2 FROM md_employee where BIRTHDAY is not null  and SYS_PROCESS_FLAG='1' AND work_status='1'
		
			<if test="unitCode != null and unitCode != ''">
			  and UNIT_CODE=#{unitCode}
		    </if>
	    
		 ) b 
		group by status1
		
  </select> 
  
  <select id="degreeStatics" parameterType="map" resultType="map" >
  		select * from (
  	SELECT degree,COUNT(degree) icount,(COUNT(degree)/total)*100 zb FROM md_employee a,
	(SELECT COUNT(*) total FROM md_employee WHERE SYS_PROCESS_FLAG='1' AND work_status='1'
	
	<if test="unitCode != null and unitCode != ''">
		  and UNIT_CODE=#{unitCode}
	 </if>
	 
	) b
	WHERE SYS_PROCESS_FLAG='1' AND work_status='1'
	<if test="unitCode != null and unitCode != ''">
		  and a.UNIT_CODE=#{unitCode}
	 </if>
	GROUP BY degree) c order by icount
  
  </select>
  
  <select id="jobsStatics" parameterType="map" resultType="map" >
  	select * from(
  	SELECT j.JOB_NAME,COUNT(a.JOB_CODE) icount,(COUNT(a.JOB_CODE)/total)*100 zb FROM md_employee a
    left join md_employee_job j on j.JOB_CODE=a.JOB_CODE,
 	(SELECT COUNT(*) total FROM md_employee WHERE SYS_PROCESS_FLAG='1' AND work_status='1' and JOB_CODE is not null
 	<if test="unitCode != null and unitCode != ''">
		  and UNIT_CODE=#{unitCode}
	 </if>
 	
 	 ) b
	WHERE a.SYS_PROCESS_FLAG='1' AND a.work_status='1' and a.JOB_CODE is not null
	
	<if test="unitCode != null and unitCode != ''">
		  and a.UNIT_CODE=#{unitCode}
	 </if>
	 
    GROUP BY a.JOB_CODE
    ) b order by icount
  </select>
  
   <select id="majorDegreeStatics" parameterType="map" resultType="map" >
   select * from (
    SELECT MAJOR_DEGREE,COUNT(MAJOR_DEGREE) icount,(COUNT(MAJOR_DEGREE)/total)*100 zb FROM md_employee a,
	(SELECT COUNT(*) total FROM md_employee WHERE SYS_PROCESS_FLAG='1' AND work_status='1' 
		<if test="unitCode != null and unitCode != ''">
		  and UNIT_CODE=#{unitCode}
	    </if>
	) b
	WHERE a.SYS_PROCESS_FLAG='1' AND a.work_status='1' 
	<if test="unitCode != null and unitCode != ''">
		  and a.UNIT_CODE=#{unitCode}
	 </if>
	GROUP BY MAJOR_DEGREE
	) b order by icount
  </select>
  
  <select id="getHumanResources" parameterType="map" resultType="map" >
  	select OFFICE_DATE officeDate,LEAVE_DATE leaveDate from md_employee where (WORK_STATUS=1
	and OFFICE_DATE&lt;=#{date} 
	<if test="unitCode != null and unitCode != ''">
		  and UNIT_CODE=#{unitCode}
	 </if>
	) or (WORK_STATUS=2 and LEAVE_DATE &gt;=#{date}  
	<if test="unitCode != null and unitCode != ''">
		  and UNIT_CODE=#{unitCode}
	 </if>
	)
  </select>
  
  <select id="isManager" parameterType="map" resultType="map">
  	 select PRO_NO proNo,PRO_NAME proName,DATE_FORMAT(S_DATE,"%Y-%m-%d") sDate,DATE_FORMAT(E_DATE,"%Y-%m-%d") eDate,case  when PRO_STATUS=1 then '登记' 
  	 when PRO_STATUS=2 then '激活' when PRO_STATUS=3 then '关闭' end  proStatus ,datediff(E_DATE,S_DATE) days,PROVINCE province,CITY city,DISTRICT district
  	 from pm_base where employeecode=#{employeeCode} order by s_date
  </select>
  
  <select id="getEmployeeMessage" parameterType="map" resultType="map">
  	select e.UNIT_CODE,u.UNIT_NAME proName,e.OFFICE_DATE officeDate,e.ADDR addr,e.JOB_CODE,j.JOB_NAME jobName from md_employee e
    left join md_org_unit u on u.UNIT_CODE=e.UNIT_CODE
    left join md_employee_job j on j.JOB_CODE=e.JOB_CODE
    where e.EMPLOYEECODE=#{employeeCode}
  </select>
  
   <select id="getMoveMessage" parameterType="map" resultType="map">
  <!-- 	select PRO_NO1 proNo1,PRO_NAME1 proName1,PRO_NO2 proNo2,PRO_NAME2 proName2,VALID_DATE validDate from pm_member_move where employeecode=#{employeeCode} -->
  	select p.PRO_NO1 proNo1,p.PRO_NAME1 proName1,p.PRO_NO2 proNo2,p.PRO_NAME2 proName2,p.VALID_DATE validDate,p.JOB_CODE1,p.JOB_CODE2,j.JOB_NAME jobName1,e.JOB_NAME jobName2
	from pm_member_move p
	left join md_employee_job j on j.JOB_CODE=p.JOB_CODE1
	left join md_employee_job e on e.JOB_CODE=p.JOB_CODE2
	 where employeecode=#{employeeCode}
  </select>
  
  
  <select id="getAcccount" parameterType="map" resultType="map">
  	  select EMPLOYEECODE,pro_manager proManager,ACCOUNT_CODE accountCode from pm_base where pro_no=#{proNo}
  </select>

  <select id="getSendList" resultType="map">
  		select * from sendlist
  </select>
  
  
  
</mapper>