<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.glens.pwCloudOs.km.base.dao.KmBaseVoMapper" >
  <resultMap id="BaseResultMap" type="com.glens.pwCloudOs.km.base.vo.KmBaseVo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
     <id column="rowid" property="rowid" jdbcType="BIGINT" />
    <result column="CATALOG_CODE" property="catalogCode" jdbcType="VARCHAR" />
    <result column="CATALOG_NAME" property="catalogName" jdbcType="VARCHAR" />
    <result column="FILE_CODE" property="fileCode" jdbcType="VARCHAR" />
    <result column="FILE_TITLE" property="fileTitle" jdbcType="VARCHAR" />
    <result column="KEYWORDS" property="keywords" jdbcType="VARCHAR" />
    <result column="EMPLOYEENAME" property="employeeName" jdbcType="VARCHAR" />
    <result column="EMPLOYEECODE" property="employeeCode" jdbcType="VARCHAR" />
    <result column="PUBLISH_AUTH" property="publishAuth" jdbcType="INTEGER" />
    <result column="PUBLISH_RANGE" property="publishRange" jdbcType="VARCHAR" />
    <result column="PUBLISH_STATUS" property="publishStatus" jdbcType="INTEGER" />
    <result column="READ_CNT" property="readCnt" jdbcType="INTEGER" />
    <result column="DOWNLOAD_CNT" property="downloadCnt" jdbcType="INTEGER" />
    <result column="BTEXT" property="btext" jdbcType="VARCHAR" />
    <result column="REMARKS" property="remarks" jdbcType="VARCHAR" />
    <result column="SYS_CREATE_TIME" property="sysCreateTime" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
  	a.rowid,a.CATALOG_CODE CATALOG_CODE,a.FILE_CODE FILE_CODE,
	a.FILE_TITLE FILE_TITLE,a.KEYWORDS KEYWORDS,a.EMPLOYEENAME EMPLOYEENAME,a.EMPLOYEECODE EMPLOYEECODE,
	a.PUBLISH_AUTH PUBLISH_AUTH,a.PUBLISH_RANGE PUBLISH_RANGE,a.PUBLISH_STATUS PUBLISH_STATUS,a.READ_CNT READ_CNT,a.DOWNLOAD_CNT DOWNLOAD_CNT,
	a.BTEXT BTEXT,
	a.REMARKS REMARKS,b.CATALOG_NAME CATALOG_NAME,a.SYS_CREATE_TIME SYS_CREATE_TIME
  </sql>
  
  <select id="queryKbBase" parameterType="long" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List" />
  	from km_base  a
  	LEFT JOIN KM_CATALOG b on a.CATALOG_CODE=b.CATALOG_CODE
  	where a.SYS_PROCESS_FLAG='1' 
  	and a.rowid=#{rowid}
  </select>
  
  
  <select id="queryKmBaseList" parameterType="map"  resultType="map">
	SELECT
		b.rowid,
		b.FILE_TITLE fileTitle,
		c.CATALOG_NAME catalogName
	FROM
		km_base b
	LEFT JOIN km_catalog c ON b.CATALOG_CODE = c.CATALOG_CODE
	WHERE
		b.SYS_PROCESS_FLAG = '1'
		<if test="codeList!=null">
			AND b.CATALOG_CODE IN (
				<foreach collection="codeList" item="item" separator="," close="" open="">
					#{item}
				</foreach>
			)
		</if>
		
	
	ORDER BY
		b.rowid DESC  	
  </select>
  
  <select id="queryKmBaseCount" parameterType="map"  resultType="int">
	SELECT
		count(1) cnt
	FROM
		km_base b
	WHERE
		b.SYS_PROCESS_FLAG = '1'
		<if test="codeList!=null">
			AND b.CATALOG_CODE IN (
				<foreach collection="codeList" item="item" separator="," close="" open="">
					#{item}
				</foreach>
			)
		</if>
  </select>
  
  
  <select id="queryKmBasekeyWordList" parameterType="map"  resultType="map">
  	SELECT
		b.rowid,
		b.FILE_TITLE fileTitle,
		c.CATALOG_NAME catalogName,
		b.FILE_CODE fileCode
	FROM
		km_base b
	LEFT JOIN km_catalog c ON b.CATALOG_CODE = c.CATALOG_CODE
	WHERE
		b.SYS_PROCESS_FLAG = '1'
	<if test="fileTitle!=null and fileTitle!=''">
			and b.FILE_TITLE  like #{fileTitle}
	</if>	
  </select>
  
  
   <select id="querySubCatalogList" parameterType="String" resultType="String">
  	select b.CATALOG_CODE from km_catalog b
  	where SYS_PROCESS_FLAG='1'
  	and  b.PARENT_CATALOG_CODE=#{catalogCode}
  </select>
  
  
  
  <select id="queryForCount" parameterType="map" resultType="int">
  	 select count(*) from km_base
  	 where SYS_PROCESS_FLAG='1' and   company_code=#{companyCode} 
  	  	<if test="catalogCode != null and catalogCode !=''">
  		and CATALOG_CODE=#{catalogCode}
  	</if>
  </select>
  
  <select id="queryForPage" parameterType="map" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List" />
  	from km_base  a
  	LEFT JOIN KM_CATALOG b on a.CATALOG_CODE=b.CATALOG_CODE
  	where a.SYS_PROCESS_FLAG='1' and a.company_code=#{companyCode} 
  	<if test="catalogCode != null and catalogCode !=''">
  		and a.CATALOG_CODE=#{catalogCode}
  	</if>
	order by a.SYS_CREATE_TIME desc
  	limit #{firstResult},#{maxResult}
  </select>
  
  
  

  
  
  
  <select id="findById" resultMap="BaseResultMap" parameterType="map" >
   select 
  	<include refid="Base_Column_List" />
  	from km_base  a
  	LEFT JOIN KM_CATALOG b on a.CATALOG_CODE=b.CATALOG_CODE
  	where a.SYS_PROCESS_FLAG='1' and a.company_code=#{companyCode} 
  	and a.rowid=#{rowid}
  </select>
  
  <delete id="delete" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update km_base set SYS_PROCESS_FLAG='0' where company_code=#{companyCode} and FILE_CODE=#{fileCode}

  </delete>
  
  <delete id="deleteAttachment" parameterType="map">
  	   delete from km_attachment where file_code=#{fileCode}
  </delete>
  
  
  <select id="getTop5" parameterType="map" resultMap="BaseResultMap">
  	
	select 
  	<include refid="Base_Column_List" />
  	from km_base  a
  	LEFT JOIN KM_CATALOG b on a.CATALOG_CODE=b.CATALOG_CODE
  	where a.SYS_PROCESS_FLAG='1' and a.company_code=#{companyCode} 
	
	order by SYS_CREATE_TIME desc
	
	limit 0,5
	
  </select>
  
  <select id="catalogMap" parameterType="map" resultType="map">
  
  	select c.CATALOG_CODE catalogCode,c.CATALOG_NAME catalogName,c.PARENT_CATALOG_CODE parentCode,
(select count(*) from km_base b where b.CATALOG_CODE=c.CATALOG_CODE and b.SYS_PROCESS_FLAG='1') fileNum
from km_catalog c 

where c.COMPANY_CODE=#{companyCode} and c.SYS_PROCESS_FLAG='1'
group by c.CATALOG_CODE

  	
  </select>
  
  <select id="getPersonRead" resultType="map" parameterType="map">
  

select k.CATALOG_CODE,k.CATALOG_NAME catalogName,k.PARENT_CATALOG_CODE,k1.CATALOG_NAME catalogName1,
(select count(*) from km_base b where b.CATALOG_CODE=k.CATALOG_CODE and b.company_code=#{companyCode}) totalNum,
(select count(*) from km_base b1  where b1.CATALOG_CODE=k.CATALOG_CODE and b1.SYS_CREATE_TIME  &gt;=#{fromDate} and b1.SYS_CREATE_TIME &lt;=#{toDate} and b1.company_code=#{companyCode}) curMonth,

(select count(*) from km_study_read s where s.file_code in(select kb.file_code from km_base kb where kb.catalog_code=k.catalog_code) and s.employeecode=#{employeeCode} and s.company_code=#{companyCode}) perRead,
(select count(*) from km_study_read s where s.file_code in(select kb.file_code from km_base kb where kb.catalog_code=k.catalog_code) and s.read_date &gt;=#{fromDate} and s.read_date &lt;=#{toDate} and s.employeecode=#{employeeCode} and s.company_code=#{companyCode}) curPerRead,
(select count(*) from km_study_read s where s.file_code in(select kb.file_code from km_base kb where kb.catalog_code=k.catalog_code) and s.company_code=#{companyCode}) totalRead
from km_catalog k
left join km_catalog k1 on k.PARENT_CATALOG_CODE=k1.CATALOG_CODE
where k.PARENT_CATALOG_CODE &lt;&gt; '0' and k.COMPANY_CODE=#{companyCode}

  </select>
 
 
 <select id="getAttachments" parameterType="map" resultType="map">
 	select FILE_NAME fileName,FILE_URL fileUrl,DL_URL dlUrl,FILE_TYPE fileType,FILE_SIZE fileSize from km_attachment where FILE_CODE=#{fileCode}
 	
 </select>
  
  
  <insert id="insertKmBase" parameterType="map" useGeneratedKeys="true" keyProperty="rowid">
  	insert into km_base(COMPANY_CODE,CATALOG_CODE,FILE_CODE,FILE_TITLE,KEYWORDS,EMPLOYEENAME,EMPLOYEECODE,
	PUBLISH_AUTH,PUBLISH_RANGE,PUBLISH_STATUS,BTEXT,SYS_CREATE_TIME,SYS_PROCESS_FLAG,REMARKS,download_cnt,read_cnt)VALUES(#{companyCode},#{catalogCode},#{fileCode},
	#{fileTitle},#{keywords},#{employeeName},#{employeeCode},1,#{publishRange},1,#{btext},now(),'1',#{remarks},0,0)
  </insert>
 
 <insert id="insertAttachment" parameterType="map">
	 insert into km_attachment(FILE_CODE,FILE_NAME,FILE_URL,DL_URL,FILE_TYPE,FILE_SIZE,SYS_CREATE_TIME,SYS_PROCESS_FLAG,DL_CNT)
	values(#{fileCode},#{fileName},#{fileUrl},#{dlUrl},#{fileType},#{fileSize},now(),'1',0)
 </insert>
 
 
 <insert id="insertDownStudy" parameterType="map">
  insert into km_study_download(FILE_CODE,EMPLOYEECODE,DOWNLOAD_DATE,SYS_CREATE_TIME,SYS_PROCESS_FLAG)
  VALUES(#{fileUrl},#{employeeCode},NOW(),NOW(),'1')
 </insert>
 
 
 <update id="updateDownNum" parameterType="map">
 	update km_base set read_cnt=read_cnt+1 
	where FILE_CODE=#{fileCode}
 	
 </update>
 
 <update id="updateDownStudyNum" parameterType="map">
 	update km_attachment set DL_CNT=DL_CNT+1 
	where FILE_URL=#{fileUrl}
 	
 </update>
 
 <update id="updateNum" parameterType="map">
 	update km_base set DOWNLOAD_CNT=DOWNLOAD_CNT+1 
	where FILE_CODE=#{fileCode}
 	
 </update>
 
  <update id="updatePublishStatus" parameterType="map">
  		update km_base set PUBLISH_STATUS=#{publishStatus} where FILE_CODE=#{fileCode}
  </update>
 
 
 <update id="updateKmBae" parameterType="map">
 	update KM_BASE  set COMPANY_CODE=#{companyCode},CATALOG_CODE=#{catalogCode},FILE_TITLE=#{fileTitle},KEYWORDS=#{keywords},
	EMPLOYEECODE=#{employeeCode},EMPLOYEENAME=#{employeeName},PUBLISH_RANGE=#{publishRange},BTEXT=#{btext},REMARKS=#{remarks}
	where FILE_CODE=#{fileCode}
 </update>
 <insert id="insertReadrecord" parameterType="map">
 	insert into KM_BASE_READRECORD (FILE_CODE,READNAME,READCODE,READTIME,SYS_PROCESS_FLAG)
	VALUES(#{fileCode},#{employeeName},#{employeeCode},now(),'1')
  </insert>
</mapper>