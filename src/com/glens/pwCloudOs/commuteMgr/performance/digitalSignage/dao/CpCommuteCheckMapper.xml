<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="CpCommuteCheckMapper" >
  <resultMap id="BaseResultMap" type="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="rowid" property="rowid" jdbcType="BIGINT" />
    <result column="COMPANY_CODE" property="companyCode" jdbcType="VARCHAR" />
    <result column="UNIT_CODE" property="unitCode" jdbcType="VARCHAR" />
    <result column="EMPLOYEECODE" property="employeecode" jdbcType="VARCHAR" />
    <result column="ACCOUNT_CODE" property="accountCode" jdbcType="VARCHAR" />
    <result column="CHECKIN_TIME" property="checkinTime" jdbcType="TIMESTAMP" />
    <result column="CHECKOUT_TIME" property="checkoutTime" jdbcType="TIMESTAMP" />
    <result column="SYS_CREATE_TIME" property="sysCreateTime" jdbcType="TIMESTAMP" />
    <result column="SYS_UPDATE_TIME" property="sysUpdateTime" jdbcType="TIMESTAMP" />
    <result column="CHECKIN_IMG1" property="checkinImg1" jdbcType="VARCHAR" />
    <result column="CHECKIN_IMG2" property="checkinImg2" jdbcType="VARCHAR" />
    <result column="SYS_DELETE_TIME" property="sysDeleteTime" jdbcType="TIMESTAMP" />
    <result column="CHECKOUT_IMG1" property="checkoutImg1" jdbcType="VARCHAR" />
    <result column="CHECKOUT_IMG2" property="checkoutImg2" jdbcType="VARCHAR" />
    <result column="SYS_PROCESS_FLAG" property="sysProcessFlag" jdbcType="CHAR" />
    <result column="REMARKS" property="remarks" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    rowid, COMPANY_CODE, UNIT_CODE, EMPLOYEECODE, ACCOUNT_CODE, CHECKIN_TIME, CHECKOUT_TIME, 
    SYS_CREATE_TIME, SYS_UPDATE_TIME, CHECKIN_IMG1, CHECKIN_IMG2, SYS_DELETE_TIME, CHECKOUT_IMG1, 
    CHECKOUT_IMG2, SYS_PROCESS_FLAG, REMARKS
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from cp_commute_check
    where rowid = #{rowid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from cp_commute_check
    where rowid = #{rowid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into cp_commute_check (rowid, COMPANY_CODE, UNIT_CODE, 
      EMPLOYEECODE, ACCOUNT_CODE, CHECKIN_TIME, 
      CHECKOUT_TIME, SYS_CREATE_TIME, SYS_UPDATE_TIME, 
      CHECKIN_IMG1, CHECKIN_IMG2, SYS_DELETE_TIME, 
      CHECKOUT_IMG1, CHECKOUT_IMG2, SYS_PROCESS_FLAG, 
      REMARKS)
    values (#{rowid,jdbcType=BIGINT}, #{companyCode,jdbcType=VARCHAR}, #{unitCode,jdbcType=VARCHAR}, 
      #{employeecode,jdbcType=VARCHAR}, #{accountCode,jdbcType=VARCHAR}, #{checkinTime,jdbcType=TIMESTAMP}, 
      #{checkoutTime,jdbcType=TIMESTAMP}, #{sysCreateTime,jdbcType=TIMESTAMP}, #{sysUpdateTime,jdbcType=TIMESTAMP}, 
      #{checkinImg1,jdbcType=VARCHAR}, #{checkinImg2,jdbcType=VARCHAR}, #{sysDeleteTime,jdbcType=TIMESTAMP}, 
      #{checkoutImg1,jdbcType=VARCHAR}, #{checkoutImg2,jdbcType=VARCHAR}, #{sysProcessFlag,jdbcType=CHAR}, 
      #{remarks,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into cp_commute_check
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="rowid != null" >
        rowid,
      </if>
      <if test="companyCode != null" >
        COMPANY_CODE,
      </if>
      <if test="unitCode != null" >
        UNIT_CODE,
      </if>
      <if test="employeecode != null" >
        EMPLOYEECODE,
      </if>
      <if test="accountCode != null" >
        ACCOUNT_CODE,
      </if>
      <if test="checkinTime != null" >
        CHECKIN_TIME,
      </if>
      <if test="checkoutTime != null" >
        CHECKOUT_TIME,
      </if>
      <if test="sysCreateTime != null" >
        SYS_CREATE_TIME,
      </if>
      <if test="sysUpdateTime != null" >
        SYS_UPDATE_TIME,
      </if>
      <if test="checkinImg1 != null" >
        CHECKIN_IMG1,
      </if>
      <if test="checkinImg2 != null" >
        CHECKIN_IMG2,
      </if>
      <if test="sysDeleteTime != null" >
        SYS_DELETE_TIME,
      </if>
      <if test="checkoutImg1 != null" >
        CHECKOUT_IMG1,
      </if>
      <if test="checkoutImg2 != null" >
        CHECKOUT_IMG2,
      </if>
      <if test="sysProcessFlag != null" >
        SYS_PROCESS_FLAG,
      </if>
      <if test="remarks != null" >
        REMARKS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="rowid != null" >
        #{rowid,jdbcType=BIGINT},
      </if>
      <if test="companyCode != null" >
        #{companyCode,jdbcType=VARCHAR},
      </if>
      <if test="unitCode != null" >
        #{unitCode,jdbcType=VARCHAR},
      </if>
      <if test="employeecode != null" >
        #{employeecode,jdbcType=VARCHAR},
      </if>
      <if test="accountCode != null" >
        #{accountCode,jdbcType=VARCHAR},
      </if>
      <if test="checkinTime != null" >
        #{checkinTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkoutTime != null" >
        #{checkoutTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sysCreateTime != null" >
        #{sysCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sysUpdateTime != null" >
        #{sysUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkinImg1 != null" >
        #{checkinImg1,jdbcType=VARCHAR},
      </if>
      <if test="checkinImg2 != null" >
        #{checkinImg2,jdbcType=VARCHAR},
      </if>
      <if test="sysDeleteTime != null" >
        #{sysDeleteTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkoutImg1 != null" >
        #{checkoutImg1,jdbcType=VARCHAR},
      </if>
      <if test="checkoutImg2 != null" >
        #{checkoutImg2,jdbcType=VARCHAR},
      </if>
      <if test="sysProcessFlag != null" >
        #{sysProcessFlag,jdbcType=CHAR},
      </if>
      <if test="remarks != null" >
        #{remarks,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update cp_commute_check
    <set >
      <if test="companyCode != null" >
        COMPANY_CODE = #{companyCode,jdbcType=VARCHAR},
      </if>
      <if test="unitCode != null" >
        UNIT_CODE = #{unitCode,jdbcType=VARCHAR},
      </if>
      <if test="employeecode != null" >
        EMPLOYEECODE = #{employeecode,jdbcType=VARCHAR},
      </if>
      <if test="accountCode != null" >
        ACCOUNT_CODE = #{accountCode,jdbcType=VARCHAR},
      </if>
      <if test="checkinTime != null" >
        CHECKIN_TIME = #{checkinTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkoutTime != null" >
        CHECKOUT_TIME = #{checkoutTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sysCreateTime != null" >
        SYS_CREATE_TIME = #{sysCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sysUpdateTime != null" >
        SYS_UPDATE_TIME = #{sysUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkinImg1 != null" >
        CHECKIN_IMG1 = #{checkinImg1,jdbcType=VARCHAR},
      </if>
      <if test="checkinImg2 != null" >
        CHECKIN_IMG2 = #{checkinImg2,jdbcType=VARCHAR},
      </if>
      <if test="sysDeleteTime != null" >
        SYS_DELETE_TIME = #{sysDeleteTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkoutImg1 != null" >
        CHECKOUT_IMG1 = #{checkoutImg1,jdbcType=VARCHAR},
      </if>
      <if test="checkoutImg2 != null" >
        CHECKOUT_IMG2 = #{checkoutImg2,jdbcType=VARCHAR},
      </if>
      <if test="sysProcessFlag != null" >
        SYS_PROCESS_FLAG = #{sysProcessFlag,jdbcType=CHAR},
      </if>
      <if test="remarks != null" >
        REMARKS = #{remarks,jdbcType=VARCHAR},
      </if>
    </set>
    where rowid = #{rowid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update cp_commute_check
    set COMPANY_CODE = #{companyCode,jdbcType=VARCHAR},
      UNIT_CODE = #{unitCode,jdbcType=VARCHAR},
      EMPLOYEECODE = #{employeecode,jdbcType=VARCHAR},
      ACCOUNT_CODE = #{accountCode,jdbcType=VARCHAR},
      CHECKIN_TIME = #{checkinTime,jdbcType=TIMESTAMP},
      CHECKOUT_TIME = #{checkoutTime,jdbcType=TIMESTAMP},
      SYS_CREATE_TIME = #{sysCreateTime,jdbcType=TIMESTAMP},
      SYS_UPDATE_TIME = #{sysUpdateTime,jdbcType=TIMESTAMP},
      CHECKIN_IMG1 = #{checkinImg1,jdbcType=VARCHAR},
      CHECKIN_IMG2 = #{checkinImg2,jdbcType=VARCHAR},
      SYS_DELETE_TIME = #{sysDeleteTime,jdbcType=TIMESTAMP},
      CHECKOUT_IMG1 = #{checkoutImg1,jdbcType=VARCHAR},
      CHECKOUT_IMG2 = #{checkoutImg2,jdbcType=VARCHAR},
      SYS_PROCESS_FLAG = #{sysProcessFlag,jdbcType=CHAR},
      REMARKS = #{remarks,jdbcType=VARCHAR}
    where rowid = #{rowid,jdbcType=BIGINT}
  </update>
  
  <select id="queryForCount" parameterType="map" resultType="int">
  	select count(*) from CP_COMMUTE_CHECK t1, es_company t2, md_org_unit t3, md_employee t4 
  	WHERE t1.company_code=t2.company_code and t1.unit_code = t3.unit_code 
  	and t1.employeecode = t4.employeecode
  	<if test="companyCode != null" >
      AND t1.COMPANY_CODE = #{companyCode,jdbcType=VARCHAR}
    </if>
    <if test="unitCode != null" >
      AND t1.UNIT_CODE = #{unitCode,jdbcType=VARCHAR}
    </if>
    <if test="employeecode != null" >
      AND t1.EMPLOYEECODE = #{employeecode,jdbcType=VARCHAR}
    </if>
    <if test="beginTime != null" >
	  AND t1.SYS_CREATE_TIME &gt;= #{beginTime, jdbcType=TIMESTAMP}
	</if>
	<if test="endTime != null" >
	  AND t1.SYS_CREATE_TIME &lt;= #{endTime, jdbcType=TIMESTAMP}
	</if>
  </select>
  
  <select id="queryForPage" parameterType="map" resultType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck">
  	SELECT 
  	t1.rowid, t1.COMPANY_CODE as companyCode, t1.UNIT_CODE as unitCode, t1.EMPLOYEECODE as employeecode, t1.ACCOUNT_CODE as accountCode, 
  	date_format(t1.CHECKIN_TIME, '%Y-%m-%d %H:%i:%s') as checkinTime, date_format(t1.CHECKOUT_TIME, '%Y-%m-%d %H:%i:%s') as checkoutTime, 
    t1.SYS_CREATE_TIME as sysCreateTime, t1.SYS_UPDATE_TIME as sysUpdateTime, t1.CHECKIN_IMG1 as checkinImg1, t1.CHECKIN_IMG2 as checkinImg2, 
    t1.SYS_DELETE_TIME as sysDeleteTime, t1.CHECKOUT_IMG1 as checkoutImg1, 
    t1.CHECKOUT_IMG2 as checkoutImg2, t1.SYS_PROCESS_FLAG as sysProcessFlag, t1.REMARKS as Remarks, 
    t2.company_name as companyName, t3.unit_name as unitName, t4.employeename, T4.job_no as jobNo
  	FROM CP_COMMUTE_CHECK t1, es_company t2, md_org_unit t3, md_employee t4 
  	WHERE t1.company_code=t2.company_code and t1.unit_code = t3.unit_code 
  	and t1.employeecode = t4.employeecode
  	<if test="companyCode != null" >
      AND t1.COMPANY_CODE = #{companyCode,jdbcType=VARCHAR}
    </if>
    <if test="unitCode != null" >
      AND t1.UNIT_CODE = #{unitCode,jdbcType=VARCHAR}
    </if>
    <if test="employeecode != null" >
      AND t1.EMPLOYEECODE = #{employeecode,jdbcType=VARCHAR}
    </if>
    <if test="beginTime != null" >
	  AND t1.SYS_CREATE_TIME &gt;= #{beginTime, jdbcType=TIMESTAMP}
	</if>
	<if test="endTime != null" >
	  AND t1.SYS_CREATE_TIME &lt;= #{endTime, jdbcType=TIMESTAMP}
	</if>
	limit #{firstResult},#{maxResult}
  </select>
  
  
  
  <select id="statisticForCount" parameterType="map" resultType="int">
select count(*) from
(

SELECT 
t1.company_code, t1.unit_code, t1.employeecode, sum(case when t1.is_checkin = 1 then 1 else 0 end) as normal_count, sum(case when t1.is_checkout = 1 then 1 else 0 end) as abnormal_count
FROM cp_commute_check t1 
WHERE 1=1
<if test="companyCode != null" >
  AND t1.COMPANY_CODE = #{companyCode,jdbcType=VARCHAR}
</if>
<if test="unitCode != null" >
  AND t1.UNIT_CODE = #{unitCode,jdbcType=VARCHAR}
</if>
<if test="employeecode != null" >
  AND t1.EMPLOYEECODE = #{employeecode,jdbcType=VARCHAR}
</if>
<if test="beginTime != null" >
  AND t1.SYS_CREATE_TIME &gt;= #{beginTime, jdbcType=TIMESTAMP}
</if>
<if test="endTime != null" >
  AND t1.SYS_CREATE_TIME &lt;= #{endTime, jdbcType=TIMESTAMP}
</if>
group by t1.company_code, t1.unit_code, t1.employeecode

) tab1 
left join md_org_unit t2 on tab1.unit_code = t2.unit_code
left join md_employee t3 on tab1.employeecode = t3.employeecode
  </select>
  
  <select id="statisticForPage" parameterType="map" resultType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck">

select tab1.company_code as companyCode, 
	tab1.unit_code as unitCode, 
	t2.unit_name as unitName, 
	tab1.employeecode, 
	t3.employeename, 
	t3.job_no as jobNo,
	round(tab1.normal_count/(tab1.normal_count+tab1.abnormal_count)*100, 1) as signPerOfPass, 
	tab1.normal_count as signNormalCount, tab1.abnormal_count as signAbnormalCount from
(

SELECT 
t1.company_code, t1.unit_code, t1.employeecode, sum(case when t1.is_checkin = 1 then 1 else 0 end) as normal_count, sum(case when t1.is_checkout = 1 then 1 else 0 end) as abnormal_count
FROM cp_commute_check t1 
WHERE 1=1
<if test="companyCode != null" >
  AND t1.COMPANY_CODE = #{companyCode,jdbcType=VARCHAR}
</if>
<if test="unitCode != null" >
  AND t1.UNIT_CODE = #{unitCode,jdbcType=VARCHAR}
</if>
<if test="employeecode != null" >
  AND t1.EMPLOYEECODE = #{employeecode,jdbcType=VARCHAR}
</if>
<if test="beginTime != null" >
  AND t1.SYS_CREATE_TIME &gt;= #{beginTime, jdbcType=TIMESTAMP}
</if>
<if test="endTime != null" >
  AND t1.SYS_CREATE_TIME &lt;= #{endTime, jdbcType=TIMESTAMP}
</if>
group by t1.company_code, t1.unit_code, t1.employeecode

) tab1 
left join md_org_unit t2 on tab1.unit_code = t2.unit_code
left join md_employee t3 on tab1.employeecode = t3.employeecode
limit #{firstResult},#{maxResult}
  </select>
  
  <!-- 根据父机构ID与时间段统计子机构的签到合格率 -->
  <select id="unitSignPerOfPassStat" parameterType="map" resultType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck">

select tab1.company_code as companyCode, 
	tab1.unit_code as unitCode, 
	t2.unit_name as unitName, 
	round(tab1.normal_count/(tab1.normal_count+tab1.abnormal_count)*100, 1) as signPerOfPass, 
	tab1.normal_count as signNormalCount, tab1.abnormal_count as signAbnormalCount from
(

SELECT 
t1.company_code, t1.unit_code, sum(case when t1.is_checkin = 1 then 1 else 0 end) as normal_count, sum(case when t1.is_checkout = 1 then 1 else 0 end) as abnormal_count
FROM cp_commute_check t1 
WHERE 1=1
<if test="unitCode != null" >
  AND t1.UNIT_CODE in (select unit_code from md_org_unit where parent_unit=#{unitCode,jdbcType=VARCHAR})
</if>
<if test="beginTime != null" >
  AND t1.SYS_CREATE_TIME &gt;= #{beginTime, jdbcType=TIMESTAMP}
</if>
<if test="endTime != null" >
  AND t1.SYS_CREATE_TIME &lt;= #{endTime, jdbcType=TIMESTAMP}
</if>
group by t1.company_code, t1.unit_code

) tab1 
left join md_org_unit t2 on tab1.unit_code = t2.unit_code
  </select>
  
  <select id="signPerOfPassTop10" parameterType="map" resultType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck">

select tab1.company_code as companyCode, 
	tab1.unit_code as unitCode, 
	t2.unit_name as unitName, 
	tab1.employeecode, 
	t3.employeename, 
	t3.job_no as jobNo,
	round(tab1.normal_count/(tab1.normal_count+tab1.abnormal_count)*100, 1) as signPerOfPass, 
	tab1.normal_count as signNormalCount, tab1.abnormal_count as signAbnormalCount from
(

SELECT 
t1.company_code, t1.unit_code, t1.employeecode, sum(case when t1.is_checkin = 1 then 1 else 0 end) as normal_count, sum(case when t1.is_checkout = 1 then 1 else 0 end) as abnormal_count
FROM cp_commute_check t1 
WHERE 1=1
<if test="unitCode != null" >
  AND t1.UNIT_CODE in (select unit_code from md_org_unit where parent_unit=#{unitCode,jdbcType=VARCHAR})
</if>
<if test="beginTime != null" >
  AND t1.SYS_CREATE_TIME &gt;= #{beginTime, jdbcType=TIMESTAMP}
</if>
<if test="endTime != null" >
  AND t1.SYS_CREATE_TIME &lt;= #{endTime, jdbcType=TIMESTAMP}
</if>
group by t1.company_code, t1.unit_code, t1.employeecode

) tab1 
left join md_org_unit t2 on tab1.unit_code = t2.unit_code
left join md_employee t3 on tab1.employeecode = t3.employeecode
order by signPerOfPass
limit 0,10
  </select>
  <insert id="insertWithJudging" parameterType="com.glens.pwCloudOs.commuteMgr.performance.digitalSignage.vo.CpCommuteCheck" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into cp_commute_check (rowid, COMPANY_CODE, UNIT_CODE, 
      EMPLOYEECODE, ACCOUNT_CODE,
      JUDGING_CODE, JUDGING_NAME, JUDGING_DESCR, CHECK_DATE,
       SYS_CREATE_TIME,  
       SYS_PROCESS_FLAG)
    values (#{rowid,jdbcType=BIGINT}, #{companyCode,jdbcType=VARCHAR}, #{unitCode,jdbcType=VARCHAR}, 
      #{employeecode,jdbcType=VARCHAR}, #{accountCode,jdbcType=VARCHAR}, 
      #{judgingCode,jdbcType=VARCHAR},#{judgingName,jdbcType=VARCHAR},#{judgingDescr,jdbcType=VARCHAR},
      #{checkDate} ,
      #{checkDate},1)
  </insert>
  <update id="updateJudging" parameterType="map">
  	update cp_commute_check 
  	set JUDGING_CODE=#{judgingCode},JUDGING_NAME=#{judgingName},JUDGING_DESCR=#{judgingDescr}
  	where rowid=#{rowid}
  </update>
</mapper>