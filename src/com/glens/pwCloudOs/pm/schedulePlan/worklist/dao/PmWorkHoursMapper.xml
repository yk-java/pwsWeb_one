<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.glens.pwCloudOs.pm.schedulePlan.worklist.dao.PmWorkHoursMapper" >
  <resultMap id="BaseResultMap" type="com.glens.pwCloudOs.pm.schedulePlan.worklist.vo.PmWorkHours" >
    <id column="ROWID" property="rowid" jdbcType="BIGINT" />
    <result column="PRO_NO" property="proNo" jdbcType="VARCHAR" />
    <result column="WORK_DATE" property="workDate" jdbcType="DATE" />
    <result column="WORKER" property="worker" jdbcType="VARCHAR" />
    <result column="JOB_NO" property="jobNo" jdbcType="VARCHAR" />
    <result column="WORK_HOURS" property="workHours" jdbcType="REAL" />
    <result column="IS_PAID_LEAVE" property="isPaidLeave" jdbcType="INTEGER" />
    <result column="PAID_HOURS" property="paidHours" jdbcType="REAL" />
    <result column="PAID_LEAVE_TYPE" property="paidLeaveType" jdbcType="INTEGER" />
    <result column="HAS_NOT_LOCAL" property="hasNotLocal" jdbcType="INTEGER" />
    <result column="NOT_LOCAL_STANDARD" property="notLocalStandard" jdbcType="INTEGER" />
    <result column="HAS_MEAL" property="hasMeal" jdbcType="INTEGER" />
    <result column="PFM_COEFFICIENT" property="pfmCoefficient" jdbcType="REAL" />
    <result column="REGULATIVE_HOURS" property="regulativeHours" jdbcType="REAL" />
    <result column="LEAVE_DESCR" property="leaveDescr" jdbcType="VARCHAR" />
    <result column="SYS_CREATE_TIME" property="sysCreateTime" jdbcType="TIMESTAMP" />
    <result column="SYS_UPDATE_TIME" property="sysUpdateTime" jdbcType="TIMESTAMP" />
    <result column="ATTENDANCE_HOURS" property="attendanceHours" jdbcType="REAL" />
    <result column="MORE_HOURS" property="moreHours" jdbcType="REAL" />
    <result column="CHECK_STATUS" property="checkStatus" jdbcType="INTEGER" />
    <result column="CHECK_TIME" property="checkTime" jdbcType="TIMESTAMP" />
    <result column="CHECK_DESCR" property="checkDescr" jdbcType="VARCHAR" />
    
    <result column="PRO_NAME" property="proName" jdbcType="VARCHAR" />
    <result column="PRO_CODE" property="proCode" jdbcType="VARCHAR" />
    <result column="WORKER_NAME" property="workerName" jdbcType="VARCHAR" />
    
    
  </resultMap>
  <resultMap id="ExcelVoMap" type="com.glens.pwCloudOs.pm.schedulePlan.worklist.vo.PmWorkListExcelVo" >
    <id column="ROWID" property="rowid" jdbcType="BIGINT" />
    <result column="PRO_NO" property="proNo" jdbcType="VARCHAR" />
    <result column="WORK_DATE" property="workDate" jdbcType="DATE" />
    <result column="WORKER" property="worker" jdbcType="VARCHAR" />
    <result column="JOB_NO" property="jobNo" jdbcType="VARCHAR" />
    <result column="WORK_HOURS" property="workHours" jdbcType="REAL" />
    <result column="IS_PAID_LEAVE" property="isPaidLeave" jdbcType="INTEGER" />
    <result column="PAID_HOURS" property="paidHours" jdbcType="REAL" />
    <result column="PAID_LEAVE_TYPE" property="paidLeaveType" jdbcType="INTEGER" />
    <result column="HAS_NOT_LOCAL" property="hasNotLocal" jdbcType="INTEGER" />
    <result column="NOT_LOCAL_STANDARD" property="notLocalStandard" jdbcType="INTEGER" />
    <result column="HAS_MEAL" property="hasMeal" jdbcType="INTEGER" />
    <result column="PFM_COEFFICIENT" property="pfmCoefficient" jdbcType="REAL" />
    <result column="REGULATIVE_HOURS" property="regulativeHours" jdbcType="REAL" />
    <result column="LEAVE_DESCR" property="leaveDescr" jdbcType="VARCHAR" />
    <result column="SYS_CREATE_TIME" property="sysCreateTime" jdbcType="TIMESTAMP" />
    <result column="SYS_UPDATE_TIME" property="sysUpdateTime" jdbcType="TIMESTAMP" />
    <result column="ATTENDANCE_HOURS" property="attendanceHours" jdbcType="REAL" />
    <result column="MORE_HOURS" property="moreHours" jdbcType="REAL" />
    <result column="CHECK_STATUS" property="checkStatus" jdbcType="INTEGER" />
    <result column="CHECK_TIME" property="checkTime" jdbcType="TIMESTAMP" />
    
    <result column="PRO_NAME" property="proName" jdbcType="VARCHAR" />
    <result column="PRO_CODE" property="proCode" jdbcType="VARCHAR" />
    <result column="WORKER_NAME" property="workerName" jdbcType="VARCHAR" />
    
    <result column="WORK_TYPE" property="workType" jdbcType="VARCHAR" />
    <result column="WORKLOAD" property="workload" jdbcType="VARCHAR" />
    <result column="WORK_DESCR" property="workDescr" jdbcType="VARCHAR" />
    <result column="MARKER" property="marker" jdbcType="VARCHAR" />
    <result column="QUALITY_CHECK_USER" property="qualityCheckUser" jdbcType="VARCHAR" />
    <result column="QUALITY_CHECK_DATE" property="qualityCheckDate" jdbcType="VARCHAR" />
    <result column="IS_FAULT" property="isFault" jdbcType="VARCHAR" />
    <result column="FAULT_DESCR" property="faultDescr" jdbcType="VARCHAR" />
    
    <result column="KPI_NAME" property="workTypeName" jdbcType="VARCHAR" />
    <result column="KPI_UNIT" property="workTypeUnit" jdbcType="VARCHAR" />
    <result column="CATEGORY_NAME" property="categoryName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    ROWID, PRO_NO, WORK_DATE, WORKER, WORK_HOURS, IS_PAID_LEAVE, PAID_HOURS, PAID_LEAVE_TYPE, 
    SYS_CREATE_TIME, SYS_UPDATE_TIME, HAS_NOT_LOCAL, HAS_MEAL, NOT_LOCAL_STANDARD, PFM_COEFFICIENT, 
    REGULATIVE_HOURS, LEAVE_DESCR, ATTENDANCE_HOURS, MORE_HOURS, CHECK_STATUS, CHECK_TIME, CHECK_DESCR
  </sql>
  <select id="findById" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    	t1.ROWID, t1.PRO_NO, t1.WORK_DATE, t1.WORKER, t1.WORK_HOURS, t1.IS_PAID_LEAVE, t1.PAID_HOURS, t1.PAID_LEAVE_TYPE, 
    	t1.SYS_CREATE_TIME, t1.SYS_UPDATE_TIME, t1.HAS_NOT_LOCAL, t1.HAS_MEAL, t1.NOT_LOCAL_STANDARD, t1.PFM_COEFFICIENT, 
    	t1.REGULATIVE_HOURS, t1.LEAVE_DESCR, t1.ATTENDANCE_HOURS, t1.MORE_HOURS, t1.CHECK_STATUS, t1.CHECK_TIME, t1.CHECK_DESCR,
    	t2.pro_name,
    	t3.employeename as worker_name
    from pm_work_hours t1
    left join pm_base t2 on t1.pro_no = t2.pro_no
    left join md_employee t3 on t1.worker = t3.employeecode
    where t1.ROWID = #{rowid,jdbcType=BIGINT}
  </select>
  <select id="findByWorkerAndWorkDate" resultMap="BaseResultMap" parameterType="map" >
    select 
    	t1.ROWID, t1.PRO_NO, t1.WORK_DATE, t1.WORKER, t1.WORK_HOURS, t1.IS_PAID_LEAVE, t1.PAID_HOURS, t1.PAID_LEAVE_TYPE, 
    	t1.SYS_CREATE_TIME, t1.SYS_UPDATE_TIME, t1.HAS_NOT_LOCAL, t1.HAS_MEAL, t1.NOT_LOCAL_STANDARD, t1.PFM_COEFFICIENT, 
    	t1.REGULATIVE_HOURS, t1.LEAVE_DESCR, t1.ATTENDANCE_HOURS, t1.MORE_HOURS, t1.CHECK_STATUS, t1.CHECK_TIME, t1.CHECK_DESCR,
    	t2.pro_name,
    	t3.employeename as worker_name
    from pm_work_hours t1
    left join pm_base t2 on t1.pro_no = t2.pro_no
    left join md_employee t3 on t1.worker = t3.employeecode
    where t1.PRO_NO = #{proNo,jdbcType=VARCHAR}
    and t1.WORK_DATE = #{workDate,jdbcType=VARCHAR}
    and t1.WORKER = #{worker,jdbcType=VARCHAR}
    limit 0,1
  </select>
  <select id="queryForCount" resultType="int" parameterType="map" >
    select 
    	count(*)
    from pm_work_hours t1
    left join pm_base t2 on t1.pro_no = t2.pro_no
    left join md_employee t3 on t1.worker = t3.employeecode
    left join md_employee t4 on t2.DISTRICT_MANAGER = t4.employeecode
    where 1=1
    <if test="proNo != null and proNo != ''">
    and FIND_IN_SET(t1.PRO_NO, #{proNo}) 
    </if>
    <if test="areaName != null and areaName != ''">
    	and (t2.CITY=#{areaName} or t2.PROVINCE=#{areaName} or t2.DISTRICT=#{areaName})
    </if>
    <if test="categoryCode != null and categoryCode != ''">
    and t2.CATEGORY_CODE = #{categoryCode,jdbcType=VARCHAR}
    </if>
    <if test="startTime != null and startTime != ''">
    and t1.WORK_DATE &gt;= #{startTime,jdbcType=VARCHAR}
    </if>
    <if test="endTime != null and endTime != ''">
    and t1.WORK_DATE &lt;= #{endTime,jdbcType=VARCHAR}
    </if>
    <if test="worker != null and worker != ''">
    and t1.WORKER = #{worker,jdbcType=VARCHAR}
    </if>
    <if test="searchName != null and searchName != ''">
    and (t3.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    	or (t2.CITY like "%"#{searchName}"%" or t2.PROVINCE like "%"#{searchName}"%" or t2.DISTRICT like "%"#{searchName}"%")
    	or t2.pro_name like "%"#{searchName}"%"
    	or t2.PRO_MANAGER like "%"#{searchName}"%"
    	or t4.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    )
    </if>
    <if test="workerName != null and workerName != ''">
    and t3.employeename like "%"#{workerName,jdbcType=VARCHAR}"%"
    </if>
    <if test="employeecode != null and employeecode != ''">
    and (t2.employeecode = #{employeecode, jdbcType=VARCHAR}
    or t2.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
    </if>
    <if test="checkStatus != null and checkStatus != -1">
    and t1.CHECK_STATUS = #{checkStatus}
    </if>
  </select>
  <select id="queryForPage" resultMap="BaseResultMap" parameterType="map" >
    select 
    	t1.ROWID, t1.PRO_NO, t1.WORK_DATE, t1.WORKER, t1.WORK_HOURS, t1.IS_PAID_LEAVE, t1.PAID_HOURS, t1.PAID_LEAVE_TYPE, 
    	t1.SYS_CREATE_TIME, t1.SYS_UPDATE_TIME, t1.HAS_NOT_LOCAL, t1.HAS_MEAL, t1.NOT_LOCAL_STANDARD, t1.PFM_COEFFICIENT, 
    	t1.REGULATIVE_HOURS, t1.LEAVE_DESCR, t1.ATTENDANCE_HOURS, t1.MORE_HOURS, t1.CHECK_STATUS, t1.CHECK_TIME, t1.CHECK_DESCR,
    	t2.pro_name,t2.pro_code,
    	t3.employeename as worker_name,
    	t3.job_no as JOB_NO
    from pm_work_hours t1
    left join pm_base t2 on t1.pro_no = t2.pro_no
    left join md_employee t3 on t1.worker = t3.employeecode
    left join md_employee t4 on t2.DISTRICT_MANAGER = t4.employeecode
    where 1=1
    <if test="proNo != null and proNo != ''">
    and FIND_IN_SET(t1.PRO_NO, #{proNo}) 
    </if>
    <if test="areaName != null and areaName != ''">
    	and (t2.CITY=#{areaName} or t2.PROVINCE=#{areaName} or t2.DISTRICT=#{areaName})
    </if>
    <if test="categoryCode != null and categoryCode != ''">
    and t2.CATEGORY_CODE = #{categoryCode,jdbcType=VARCHAR}
    </if>
    <if test="startTime != null and startTime != ''">
    and t1.WORK_DATE &gt;= #{startTime,jdbcType=VARCHAR}
    </if>
    <if test="endTime != null and endTime != ''">
    and t1.WORK_DATE &lt;= #{endTime,jdbcType=VARCHAR}
    </if>
    <if test="worker != null and worker != ''">
    and t1.WORKER = #{worker,jdbcType=VARCHAR}
    </if>
    <if test="searchName != null and searchName != ''">
    and (t3.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    	or (t2.CITY like "%"#{searchName}"%" or t2.PROVINCE like "%"#{searchName}"%" or t2.DISTRICT like "%"#{searchName}"%")
    	or t2.pro_name like "%"#{searchName}"%"
    	or t2.PRO_MANAGER like "%"#{searchName}"%"
    	or t4.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    )
    </if>
    <if test="workerName != null and workerName != ''">
    and t3.employeename like "%"#{workerName,jdbcType=VARCHAR}"%"
    </if>
    <if test="employeecode != null and employeecode != ''">
    and (t2.employeecode = #{employeecode, jdbcType=VARCHAR}
    or t2.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
    </if>
    <if test="checkStatus != null and checkStatus != -1">
    and t1.CHECK_STATUS = #{checkStatus}
    </if>
    order by pro_no, work_date desc, worker
    limit #{firstResult},#{maxResult} 
  </select>
  <select id="queryForList" resultMap="ExcelVoMap" parameterType="map" >
    select 
    	t1.ROWID, t1.PRO_NO, t1.WORK_DATE, t1.WORKER, t1.WORK_HOURS, t1.IS_PAID_LEAVE, t1.PAID_HOURS, t1.PAID_LEAVE_TYPE, 
    	t1.SYS_CREATE_TIME, t1.SYS_UPDATE_TIME, t1.HAS_NOT_LOCAL, t1.HAS_MEAL, t1.NOT_LOCAL_STANDARD, ROUND(t1.PFM_COEFFICIENT, 2) as PFM_COEFFICIENT, 
    	t1.REGULATIVE_HOURS, t1.LEAVE_DESCR, t1.ATTENDANCE_HOURS, t1.MORE_HOURS, t1.CHECK_STATUS, t1.CHECK_TIME, t1.CHECK_DESCR,
    	t2.WORK_TYPE, t2.WORKLOAD, t2.WORK_DESCR, t2.MARKER, t2.QUALITY_CHECK_USER, t2.QUALITY_CHECK_DATE, t2.IS_FAULT, t2.FAULT_DESCR,
    	t3.pro_name, t3.pro_code,
    	t4.employeename as worker_name,
    	t4.job_no as JOB_NO,
    	t5.kpi_name,
    	t5.kpi_unit,
    	t6.category_name
    from pm_work_hours t1
    left join pm_work_list t2 on t1.worker = t2.worker and t1.work_date = t2.work_date and t1.pro_no=t2.pro_no
    left join pm_base t3 on t1.pro_no = t3.pro_no
    left join md_employee t4 on t1.worker = t4.employeecode
    left join pm_pro_kpi t5 on t2.work_type = t5.kpi_code and t1.pro_no = t5.pro_no
    left join pm_category t6 on t3.category_code = t6.category_code
    left join md_employee t7 on t3.DISTRICT_MANAGER = t7.employeecode
    where 1=1
    <if test="proNo != null and proNo != ''">
    and FIND_IN_SET(t1.PRO_NO, #{proNo}) 
    </if>
    <if test="areaName != null and areaName != ''">
    	and (t3.CITY=#{areaName} or t3.PROVINCE=#{areaName} or t3.DISTRICT=#{areaName})
    </if>
    <if test="categoryCode != null and categoryCode != ''">
    and t3.CATEGORY_CODE = #{categoryCode,jdbcType=VARCHAR}
    </if>
    <if test="startTime != null and startTime != ''">
    and t1.WORK_DATE &gt;= #{startTime,jdbcType=VARCHAR}
    </if>
    <if test="endTime != null and endTime != ''">
    and t1.WORK_DATE &lt;= #{endTime,jdbcType=VARCHAR}
    </if>
    <if test="worker != null and worker != ''">
    and t1.WORKER = #{worker,jdbcType=VARCHAR}
    </if>
    <if test="searchName != null and searchName != ''">
    and (t4.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    	or (t3.CITY like "%"#{searchName}"%" or t3.PROVINCE like "%"#{searchName}"%" or t3.DISTRICT like "%"#{searchName}"%")
    	or t3.pro_name like "%"#{searchName}"%"
    	or t3.PRO_MANAGER like "%"#{searchName}"%"
    	or t7.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    )
    </if>
    <if test="workerName != null and workerName != ''">
    and t4.employeename like "%"#{workerName,jdbcType=VARCHAR}"%"
    </if>
    <if test="employeecode != null and employeecode != ''">
    and (t3.employeecode = #{employeecode, jdbcType=VARCHAR}
    or t3.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
    </if>
    <if test="checkStatus != null and checkStatus != -1">
    and t1.CHECK_STATUS = #{checkStatus}
    </if>
    order by pro_no, work_date desc, worker
  </select>
  
  <select id="dateWillBeCreate" resultType="string" parameterType="string">
  	SELECT work_date FROM pm_work_hours WHERE  pro_no=#{proNo}
	AND work_date > (CASE WHEN (SELECT MAX(report_date) FROM pm_day_wordload WHERE pro_no=#{proNo}) IS NOT NULL
	THEN (SELECT MAX(report_date) FROM pm_day_wordload WHERE pro_no=#{proNo})
	ELSE 0 END)
	GROUP BY work_date
	ORDER BY work_date
  </select>
  <select id="dateWillBeUpdate" resultType="string" parameterType="map">
  	SELECT work_date FROM pm_work_hours WHERE  pro_no=#{proNo}
	AND work_date >= #{date}
	GROUP BY work_date
	ORDER BY work_date
  </select>
  
  <select id="workHoursIsChecked" resultType="map" parameterType="map">
  SELECT COUNT(*) AS cnt, SUM(CASE WHEN check_status=1 THEN 1 ELSE 0 END) AS checkedVal 
	FROM pm_work_hours WHERE pro_no=#{proNo} AND work_date=#{date}
  </select>
  
  <select id="workHoursStatistics" resultType="map" parameterType="map">
  	/* 人员工时统计 */
	SELECT t1.pro_no AS proNo, t2.pro_code AS proCode, t2.pro_name AS proName, t1.worker, t3.employeename AS workerName, 
		t3.job_no AS jobNo, t4.job_name as jobName, t1.workHours, t1.paidHours, t1.hasNotLocal, t1.hasNotLocalAmount, t1.hasMeal, t1.hasMealAmount, t1.paidDescr,
		t1.pfmCoefficient, t1.regulativeHours, t1.attendanceHours, t1.moreHours 
	FROM 
	(SELECT pro_no, worker, ROUND(SUM(work_hours),2) AS workHours, ROUND(SUM(CASE WHEN paid_leave_type=1 THEN paid_hours/2 ELSE paid_hours END),2) AS paidHours, 
		ROUND(SUM(has_not_local),2) as hasNotLocal, ROUND(SUM(not_local_standard),2) as hasNotLocalAmount, 
		ROUND(SUM(has_meal),2) as hasMeal, ROUND(SUM(has_meal*15),2) as hasMealAmount, GROUP_CONCAT(paidDescr) AS paidDescr, 
		ROUND(SUM(PFM_COEFFICIENT),2) as pfmCoefficient, ROUND(SUM(REGULATIVE_HOURS),2) as regulativeHours,
		ROUND(SUM(ATTENDANCE_HOURS),2) AS attendanceHours, ROUND(SUM(MORE_HOURS),2) AS moreHours
	FROM (
		SELECT tab1.*,(CASE WHEN paid_leave_type=1 THEN CONCAT(work_date, '病假', '(', paid_hours, ')')
			WHEN paid_leave_type=2 THEN CONCAT(work_date, '产假', '(', paid_hours, ')')
			WHEN paid_leave_type=3 THEN CONCAT(work_date, '陪产假', '(', paid_hours, ')')
			WHEN paid_leave_type=4 THEN CONCAT(work_date, '婚假', '(', paid_hours, ')')
			WHEN paid_leave_type=5 THEN CONCAT(work_date, '丧假', '(', paid_hours, ')')
			WHEN paid_leave_type=6 THEN CONCAT(work_date, '年假', '(', paid_hours, ')')
			WHEN paid_leave_type=7 THEN CONCAT(work_date, '哺乳假', '(', paid_hours, ')')
			WHEN paid_leave_type=8 THEN CONCAT(work_date, '法定节假日', '(', paid_hours, ')')
			WHEN paid_leave_type=9 THEN CONCAT(work_date, leave_descr, '(', paid_hours, ')')
			ELSE NULL END) AS paidDescr
		FROM pm_work_hours tab1
		left join pm_base tab2 on tab1.pro_no = tab2.pro_no
		WHERE  work_date &gt;= #{startTime,jdbcType=VARCHAR}
		AND work_date &lt;= #{endTime,jdbcType=VARCHAR}
		<if test="proNo != null and proNo != ''">
		AND tab1.pro_no = #{proNo,jdbcType=VARCHAR}
		</if>
		<if test="employeecode != null and employeecode != ''">
	    and (tab2.employeecode = #{employeecode, jdbcType=VARCHAR}
	    or tab2.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
	    </if>
		ORDER BY work_date
	) t 
	GROUP BY pro_no,worker) t1
	
	JOIN pm_base t2 ON t1.pro_no=t2.PRO_NO
	JOIN md_employee t3 ON t1.worker=t3.employeecode
	LEFT JOIN md_employee_job t4 ON t3.job_code=t4.job_code
	WHERE 1=1
	<if test="worker != null and worker != ''">
	AND (t3.employeename like "%"#{worker}"%"
	OR t3.job_no = #{worker} or t2.PRO_NO like concat('%',#{worker},'%') or t2.PRO_NAME like concat('%',#{worker},'%') or t2.PRO_MANAGER like concat('%',#{worker},'%'))
	</if>
  </select>
  <select id="workHoursStatisticsExport" resultType="map" parameterType="map">
  	/*  导出 */
	SELECT t1.pro_no AS proNo, t2.pro_code AS proCode, t2.pro_name AS proName, t1.worker, t3.employeename AS workerName, 
		t3.job_no AS jobNo, t4.job_name AS jobName, t1.workHours, t1.paidHours, t1.hasNotLocal, t1.hasNotLocalAmount, t1.hasMeal, t1.hasMealAmount,
		pfmCoefficient, regulativeHours,
		t1.paidHours1,
		t1.paidHours2,
		t1.paidHours3,
		t1.paidHours4,
	    t1.paidHours5,
	    t1.paidHours6,
	    t1.paidHours7,
	    t1.paidHours8,
	    t1.paidHours9,
	    t1.attendanceHours, t1.moreHours
	FROM 
	(SELECT pro_no, worker, ROUND(SUM(work_hours),2) AS workHours, ROUND(SUM(CASE WHEN paid_leave_type=1 THEN paid_hours/2 ELSE paid_hours END),2) AS paidHours,
	ROUND(SUM(has_not_local),2) as hasNotLocal, ROUND(SUM(not_local_standard),2) as hasNotLocalAmount, ROUND(SUM(has_meal),2) as hasMeal, ROUND(SUM(has_meal*15),2) as hasMealAmount,
	ROUND(SUM(PFM_COEFFICIENT),2) as pfmCoefficient, ROUND(SUM(REGULATIVE_HOURS),2) as regulativeHours,
	ROUND(SUM(paidHours1),2) AS paidHours1,
	ROUND(SUM(paidHours2),2) AS paidHours2,
	ROUND(SUM(paidHours3),2) AS paidHours3,
	ROUND(SUM(paidHours4),2) AS paidHours4,
	ROUND(SUM(paidHours5),2) AS paidHours5,
	ROUND(SUM(paidHours6),2) AS paidHours6,
	ROUND(SUM(paidHours7),2) AS paidHours7,
	ROUND(SUM(paidHours8),2) AS paidHours8,
	ROUND(SUM(paidHours9),2) AS paidHours9,
	ROUND(SUM(ATTENDANCE_HOURS),2) AS attendanceHours, 
	ROUND(SUM(MORE_HOURS),2) as moreHours
	FROM (
		SELECT tab1.*,
		(CASE WHEN paid_leave_type=1 THEN paid_hours ELSE 0 END) AS paidHours1,
		(CASE WHEN paid_leave_type=2 THEN paid_hours ELSE 0 END) AS paidHours2,
		(CASE WHEN paid_leave_type=3 THEN paid_hours ELSE 0 END) AS paidHours3,
		(CASE WHEN paid_leave_type=4 THEN paid_hours ELSE 0 END) AS paidHours4,
		(CASE WHEN paid_leave_type=5 THEN paid_hours ELSE 0 END) AS paidHours5,
		(CASE WHEN paid_leave_type=6 THEN paid_hours ELSE 0 END) AS paidHours6,	
		(CASE WHEN paid_leave_type=7 THEN paid_hours ELSE 0 END) AS paidHours7,	
		(CASE WHEN paid_leave_type=8 THEN paid_hours ELSE 0 END) AS paidHours8,	
		(CASE WHEN paid_leave_type=9 THEN paid_hours ELSE 0 END) AS paidHours9	
		FROM pm_work_hours tab1
		left join pm_base tab2 on tab1.pro_no = tab2.pro_no
		WHERE  work_date &gt;= #{startTime,jdbcType=VARCHAR}
		AND work_date &lt;= #{endTime,jdbcType=VARCHAR}
		<if test="proNo != null and proNo != ''">
		AND tab1.pro_no = #{proNo,jdbcType=VARCHAR}
		</if>
		<if test="employeecode != null and employeecode != ''">
	    and (tab2.employeecode = #{employeecode, jdbcType=VARCHAR}
	    or tab2.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
	    </if>
		ORDER BY work_date
	) t
	GROUP BY pro_no,worker) t1
	
	 JOIN pm_base t2 ON t1.pro_no=t2.PRO_NO
	 JOIN md_employee t3 ON t1.worker=t3.employeecode
	 LEFT JOIN md_employee_job t4 ON t3.job_code = t4.job_code
	WHERE 1=1
	<if test="worker != null and worker != ''">
	AND (t3.employeename like "%"#{worker}"%"
	OR t3.job_no = #{worker} or t2.PRO_NO like concat('%',#{worker},'%') or t2.PRO_NAME like concat('%',#{worker},'%') or t2.PRO_MANAGER like concat('%',#{worker},'%'))
	</if>
  </select>
  <select id="proCostStatistics" resultType="map" parameterType="map">
  	/* 截至到某日项目下各人员工时统计 */
	SELECT worker, ROUND(SUM(work_hours),2) AS workHours, 
		ROUND(SUM(CASE WHEN paid_leave_type=1 THEN paid_hours/2 ELSE paid_hours END),2) AS paidHours, 
		ROUND(SUM(not_local_standard),2) AS hasNotLocalAmount, ROUND(SUM(has_meal*15),2) AS hasMealAmount,
		ROUND(SUM(PFM_COEFFICIENT),2) as pfmCoefficient, ROUND(SUM(REGULATIVE_HOURS),2) as regulativeHours
	FROM pm_work_hours 
	WHERE work_date &gt;= #{starttime} AND work_date &lt;= #{endtime}  
	AND pro_no=#{proNo}
	GROUP BY worker
  </select>
  <select id="statisticsDayWorkloadHours" resultType="float" parameterType="map">
  	SELECT ROUND(SUM(work_hours), 2) FROM pm_work_hours WHERE pro_no=#{proNo} AND work_date=#{workDate}
  </select>
  <select id="statisticsAllWorkloadHours" resultType="float" parameterType="map">
  	SELECT ROUND(SUM(work_hours), 2) FROM pm_work_hours WHERE pro_no=#{proNo} AND work_date &lt;= #{workDate}
  </select>
  <delete id="delete" parameterType="java.lang.Long" >
    delete from pm_work_hours
    where ROWID = #{rowid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.glens.pwCloudOs.pm.schedulePlan.worklist.vo.PmWorkHours" >
    insert into pm_work_hours (PRO_NO, WORK_DATE, 
      WORKER, WORK_HOURS, IS_PAID_LEAVE, 
      PAID_HOURS, PAID_LEAVE_TYPE, SYS_CREATE_TIME, 
      SYS_UPDATE_TIME, HAS_NOT_LOCAL, HAS_MEAL, NOT_LOCAL_STANDARD, 
      PFM_COEFFICIENT, REGULATIVE_HOURS, LEAVE_DESCR, ATTENDANCE_HOURS, 
      MORE_HOURS, CHECK_STATUS, CHECK_DESCR)
    values (#{proNo,jdbcType=VARCHAR}, #{workDate,jdbcType=DATE}, 
      #{worker,jdbcType=VARCHAR}, #{workHours,jdbcType=REAL}, #{isPaidLeave,jdbcType=INTEGER}, 
      #{paidHours,jdbcType=REAL}, #{paidLeaveType,jdbcType=INTEGER}, now(), 
      null, #{hasNotLocal,jdbcType=INTEGER}, #{hasMeal,jdbcType=INTEGER}, #{notLocalStandard,jdbcType=INTEGER},
      #{pfmCoefficient,jdbcType=REAL}, #{regulativeHours,jdbcType=REAL}, #{leaveDescr,jdbcType=VARCHAR}, 
      #{attendanceHours,jdbcType=REAL}, #{moreHours,jdbcType=REAL}, 0, #{checkDescr})
  </insert>
  <update id="update" parameterType="com.glens.pwCloudOs.pm.schedulePlan.worklist.vo.PmWorkHours" >
    update pm_work_hours
    <set >
      <if test="proNo != null and proNo != ''" >
        PRO_NO = #{proNo,jdbcType=VARCHAR},
      </if>
      <if test="workDate != null and workDate != ''" >
        WORK_DATE = #{workDate,jdbcType=DATE},
      </if>
      <if test="worker != null and worker != ''" >
        WORKER = #{worker,jdbcType=VARCHAR},
      </if>
      <if test="workHours != null" >
        WORK_HOURS = #{workHours,jdbcType=REAL},
      </if>
      <if test="isPaidLeave != null" >
        IS_PAID_LEAVE = #{isPaidLeave,jdbcType=INTEGER},
      </if>
      <if test="paidHours != null" >
        PAID_HOURS = #{paidHours,jdbcType=REAL},
      </if>
      <if test="paidLeaveType != null" >
        PAID_LEAVE_TYPE = #{paidLeaveType,jdbcType=INTEGER},
      </if>
      <if test="hasNotLocal != null" >
        HAS_NOT_LOCAL = #{hasNotLocal,jdbcType=INTEGER},
      </if>
      <if test="notLocalStandard != null" >
        NOT_LOCAL_STANDARD = #{notLocalStandard,jdbcType=INTEGER},
      </if>
      <if test="hasMeal != null" >
        HAS_MEAL = #{hasMeal,jdbcType=INTEGER},
      </if>
      <if test="pfmCoefficient != null" >
        PFM_COEFFICIENT = #{pfmCoefficient,jdbcType=REAL},
      </if>
      <if test="regulativeHours != null" >
        REGULATIVE_HOURS = #{regulativeHours,jdbcType=REAL},
      </if>
      <if test="leaveDescr != null and leaveDescr != ''" >
        LEAVE_DESCR = #{leaveDescr,jdbcType=VARCHAR},
      </if>
      <if test="attendanceHours != null" >
        ATTENDANCE_HOURS = #{attendanceHours,jdbcType=REAL},
      </if>
      <if test="moreHours != null" >
        MORE_HOURS = #{moreHours,jdbcType=REAL},
      </if>
      <if test="checkStatus != null and checkStatus != 0" >
        CHECK_STATUS = #{checkStatus,jdbcType=INTEGER},
      </if>
        SYS_UPDATE_TIME = now(),
    </set>
    where ROWID = #{rowid,jdbcType=BIGINT}
  </update>
  <update id="calculateWorkHours" parameterType="map">
  	UPDATE pm_work_hours 
	SET WORK_HOURS = (
		SELECT ROUND(SUM(t1.workload*(8/t2.standard)),2) FROM 
		(SELECT * FROM pm_work_list WHERE pro_no=#{proNo,jdbcType=VARCHAR} AND work_date=#{workDate,jdbcType=DATE} AND worker=#{worker,jdbcType=VARCHAR}) t1
		JOIN (SELECT pro_no, kpi_code, standard FROM pm_pro_kpi WHERE pro_no=#{proNo,jdbcType=VARCHAR}) t2
		ON t1.work_type = t2.kpi_code
	)
	WHERE 
		pro_no=#{proNo,jdbcType=VARCHAR} 
		AND work_date=#{workDate,jdbcType=DATE} 
		AND worker=#{worker,jdbcType=VARCHAR}
	;
	UPDATE pm_work_hours 
	SET WORK_HOURS = case when WORK_HOURS then WORK_HOURS else 0 end 
	WHERE 
		pro_no=#{proNo,jdbcType=VARCHAR} 
		AND work_date=#{workDate,jdbcType=DATE} 
		AND worker=#{worker,jdbcType=VARCHAR}
  </update>
  <update id="checkWorkHours" parameterType="map" >
    update pm_work_hours t1
    left join pm_base t2 on t1.pro_no = t2.pro_no
    left join md_employee t3 on t1.worker = t3.employeecode
    left join md_employee t7 on t2.DISTRICT_MANAGER = t7.employeecode
    set t1.check_status=1, t1.check_time=now()
    where 1=1
    <if test="proNo != null and proNo != ''">
    and FIND_IN_SET(t1.PRO_NO, #{proNo}) 
    </if>
    <if test="categoryCode != null and categoryCode != ''">
    and t2.CATEGORY_CODE = #{categoryCode,jdbcType=VARCHAR}
    </if>
    <if test="startTime != null and startTime != ''">
    and t1.WORK_DATE &gt;= #{startTime,jdbcType=VARCHAR}
    </if>
    <if test="endTime != null and endTime != ''">
    and t1.WORK_DATE &lt;= #{endTime,jdbcType=VARCHAR}
    </if>
    <if test="worker != null and worker != ''">
    and t1.WORKER = #{worker,jdbcType=VARCHAR}
    </if>
    <if test="searchName != null and searchName != ''">
    and (t3.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    	or (t2.CITY like "%"#{searchName}"%" or t2.PROVINCE like "%"#{searchName}"%" or t2.DISTRICT like "%"#{searchName}"%")
    	or t2.pro_name like "%"#{searchName}"%"
    	or t2.PRO_MANAGER like "%"#{searchName}"%"
    	or t7.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    )
    </if>
    <if test="workerName != null and workerName != ''">
    and t3.employeename like "%"#{workerName,jdbcType=VARCHAR}"%"
    </if>
    <if test="employeecode != null and employeecode != ''">
    and (t2.employeecode = #{employeecode, jdbcType=VARCHAR}
    or t2.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
    </if>
  </update>
  <update id="backWorkHours" parameterType="map" >
    update pm_work_hours t1
    left join pm_base t2 on t1.pro_no = t2.pro_no
    left join md_employee t3 on t1.worker = t3.employeecode
    left join md_employee t7 on t2.DISTRICT_MANAGER = t7.employeecode
    set t1.check_status=2, t1.check_time=now(), t1.check_descr=#{checkDescr}
    where 1=1
    <if test="proNo != null and proNo != ''">
    and FIND_IN_SET(t1.PRO_NO, #{proNo}) 
    </if>
    <if test="workDate != null and workDate != ''">
    and t1.WORK_DATE = #{workDate,jdbcType=VARCHAR}
    </if>
    <if test="worker != null and worker != ''">
    and t1.WORKER = #{worker,jdbcType=VARCHAR}
    </if>
    <if test="categoryCode != null and categoryCode != ''">
    and t2.CATEGORY_CODE = #{categoryCode,jdbcType=VARCHAR}
    </if>
    <if test="startTime != null and startTime != ''">
    and t1.WORK_DATE &gt;= #{startTime,jdbcType=VARCHAR}
    </if>
    <if test="endTime != null and endTime != ''">
    and t1.WORK_DATE &lt;= #{endTime,jdbcType=VARCHAR}
    </if>
    <if test="searchName != null and searchName != ''">
    and (t3.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    	or (t2.CITY like "%"#{searchName}"%" or t2.PROVINCE like "%"#{searchName}"%" or t2.DISTRICT like "%"#{searchName}"%")
    	or t2.pro_name like "%"#{searchName}"%"
    	or t2.PRO_MANAGER like "%"#{searchName}"%"
    	or t7.employeename like "%"#{searchName,jdbcType=VARCHAR}"%"
    )
    </if>
    <if test="workerName != null and workerName != ''">
    and t3.employeename like "%"#{workerName,jdbcType=VARCHAR}"%"
    </if>
    <if test="employeecode != null and employeecode != ''">
    and (t2.employeecode = #{employeecode, jdbcType=VARCHAR}
    or t2.DISTRICT_MANAGER = #{employeecode, jdbcType=VARCHAR})
    </if>
  </update>
  <select id="selectProByProCode" resultType="map" parameterType="map">
<!--   	取项目编号proCode -->
  	select pro_no as proNo, pro_name as proName, pro_code as proCode, category_code as categoryCode 
  	from pm_base 
  	where pro_code = #{proCode}
  	limit 0,1
  </select>
  <select id="selectKpiByNameAndCategoryCode" resultType="map" parameterType="map">
<!-- 	取作业类型名称+取项目类型编号 ====> 查作业类型 -->
	select category_code as categoryCode, kpi_name as kpiName, kpi_code as kpiCode, kpi_type as kpiType 
	from pm_kpi_lib 
	where category_code=#{categoryCode} 
		and kpi_name = #{kpiName}
	limit 0,1
  </select>
  <select id="selectEmployeeByName" resultType="map" parameterType="map">
<!-- 	取作业人查找员工信息，如果查出多个，则取工号根据工号确定 -->
	select employeecode, employeename, job_no as jobNo
	from md_employee
	where employeename=#{workerName}
  </select>
</mapper>