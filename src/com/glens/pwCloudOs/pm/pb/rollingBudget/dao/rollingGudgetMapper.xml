<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.glens.pwCloudOs.pm.pb.rollingBudget.dao.rollingGudgetMapper" >
  
  
  
  <select id="selectProRollingBudgetList" parameterType="map" resultType="map">
  	SELECT a.pro_no proNo,a.pro_name proName,a.PRO_MANAGER proManager,b.CATEGORY_NAME categoryName,a.pro_code proCode,
	IFNULL(DATE_FORMAT(c.SYS_CREATE_TIME,'%Y-%m-%d'),'') sysCreateTime,IFNULL(DATE_FORMAT(v.SYS_UPDATE_TIME,'%Y-%m-%d'),'') lastUpdateTime,
	IFNULL(DATE_FORMAT(c.BUDGET_TIME,'%Y-%m-%d'),'') budgetTime,IFNULL(DATE_FORMAT(a.S_DATE,'%Y-%m-%d'),'')  sdate,
    IFNULL(DATE_FORMAT(a.E_DATE,'%Y-%m-%d'),'') edate,a.PPM ppm,a.PPW ppw,c.BUDGET_CODE budgetCode,v.VERSION_CODE versionCode,v.VERSION_NO versionNo,
    IFNULL(v.BUDGET_NO,'') budgetNo
	FROM pm_base a
	JOIN pm_category b ON a.category_code=b.category_code
	LEFT JOIN PM_PB_ROLLING_BUDGET c ON a.COMPANY_CODE=c.COMPANY_CODE AND a.PRO_NO=c.PRO_No
    left join (SELECT * FROM (SELECT * FROM PM_PB_ROLLING_BUDGET_VERSION ORDER BY VERSION_ORDER DESC )t
GROUP BY COMPANY_CODE,PRO_NO,BUDGET_CODE) v on v.BUDGET_CODE=c.BUDGET_CODE and v.COMPANY_CODE=a.COMPANY_CODE and v.PRO_NO=a.PRO_NO
	WHERE a.SYS_PROCESS_FLAG='1' and a.COMPANY_CODE=#{companyCode}
	<if test="categoryCode != null and categoryCode != ''">
    	and a.CATEGORY_CODE=#{categoryCode}
    </if>
    <if test="proNo != null and proNo != ''">
    	and a.PRO_NO = #{proNo}
    </if>
    <if test="proStatus != null and proStatus != ''">
    	and a.PRO_STATUS=#{proStatus}
    </if>
     <if test="deptCode != null and deptCode != ''">
    and a.MANAGE_DEPT=#{deptCode}
    </if>
    <if test="districtManager != null and districtManager != ''">
	and a.DISTRICT_MANAGER=#{districtManager}
	</if>
	<if test="proManager != null and proManager != ''">
	and a.EMPLOYEECODE=#{proManager}
	</if>
	<if test="areaName != null and areaName != ''">
    	and (a.CITY=#{areaName} or a.PROVINCE=#{areaName} or a.DISTRICT=#{areaName})
    </if>
  </select>
  
  <select id="selectProItemCostDetail" parameterType="map" resultType="map">
 			select * from(SELECT a.item_name itemName,a.check_content checkContent,a.ITEM_CODE itemCode,
	${sqlSeq}
	IFNULL(SUM(b.COST),0) total
	FROM PM_PB_ITEM a
	LEFT JOIN PM_PB_SECTION_ITEM_COST b ON a.company_code=b.company_code 
	AND a.item_code=b.item_code AND b.pro_no=#{proNo} and b.BUDGET_CODE=#{budgetCode} and b.VERSION_CODE=#{versionCode} 
	WHERE a.company_code=#{companyCode} and a.ITEM_TYPE=2  
	GROUP BY a.item_code
	  ORDER BY a.ITEM_ORDER) t
	UNION
	SELECT '合计' itemName,'' checkContent, '' itemCode,
	${sqlSeq}
	IFNULL(SUM(b.COST),0) total
	FROM PM_PB_ITEM a
	LEFT JOIN PM_PB_SECTION_ITEM_COST b ON a.company_code=b.company_code  and b.BUDGET_CODE=#{budgetCode} and b.VERSION_CODE=#{versionCode} 
	AND a.item_code=b.item_code AND b.pro_no=#{proNo}
	WHERE a.company_code=#{companyCode}
	
 </select>
 
  <select id="selectProSection" parameterType="map" resultType="map">
  	select SECTION_CODE sectionCode,DATE_FORMAT(SECTION_START_TIME,'%Y-%m-%d')   startTime,DATE_FORMAT(SECTION_END_TIME,'%Y-%m-%d')   endTime,
  	PRO_NO proNo,PRO_NAME proName,IFNULL(READONLY,0) readOnly 
  	from  PM_PB_BUDGET_SECTION
	where PRO_NO=#{proNo} and COMPANY_CODE=#{companyCode} and  SYS_PROCESS_FLAG='1' 
	and VERSION_CODE=#{versionCode} and BUDGET_CODE=#{budgetCode}
	ORDER BY  SECTION_ORDER
  </select>
  
   

 
  <delete id="deleteProCost" parameterType="map">
 	delete from PM_PB_SECTION_ITEM_COST where COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} and VERSION_CODE=#{versionCode}
 </delete>
 
 <insert id="insertProSectionCost" parameterType="java.util.List">
 	insert into PM_PB_SECTION_ITEM_COST(COMPANY_CODE,PRO_NO,BUDGET_CODE,VERSION_CODE,SECTION_CODE,ITEM_CODE,COST,SYS_CREATE_TIME,SYS_PROCESS_FLAG)
 	values
 	<foreach collection="list" index="i" item="p" separator=",">
 	(#{p.companyCode},#{p.proNo},#{p.budgetCode},#{p.versionCode},#{p.sectionCode},#{p.itemCode},#{p.cost},now(),'1')
 	</foreach>
 </insert>
 
 
 <select id="selectProRollingBudget" parameterType="map" resultType="map">
  	SELECT a.PRO_NO proNo, a.PRO_NAME proName,
  	IFNULL(DATE_FORMAT(b.BUDGET_TIME,'%Y-%m-%d'),'') budgetTime,
  	IFNULL(b.remarks,'') remarks
  	FROM pm_base a 
  	LEFT JOIN PM_PB_ROLLING_BUDGET b ON a.company_code=b.company_code AND a.pro_no=b.pro_no 
  	WHERE a.COMPANY_CODE=#{companyCode} and a.PRO_NO=#{proNo}
  </select>
 
 
 

 
   <select id="getEmpCostDetail" parameterType="map" resultType="map">
 	SELECT t.* FROM (
 	SELECT a.ROW_ID rowid,b.employeename,a.employeecode,b.job_no jobNo, 
	${sqlSeq}
	IFNULL(SUM(a.TRACE_SUBSIDY),0) total
	FROM PM_PB_SECTION_TRAVEL_SUBSIDY a
	LEFT JOIN md_employee b ON a.employeecode=b.employeecode
    AND a.pro_no=#{proNo}
	WHERE a.company_code=#{companyCode} 
	GROUP BY a.employeecode
	UNION  SELECT '' rowid,'合计' itemName,'' employeecode, '' jobNo,
	${sqlSeq}
	IFNULL(SUM(a.TRACE_SUBSIDY),0) total
	FROM PM_PB_SECTION_TRAVEL_SUBSIDY a
	LEFT JOIN md_employee b ON a.employeecode=b.employeecode 
	WHERE a.company_code=#{companyCode}) t
 </select>
 
 
 <insert id="insertTravelSubsidy" parameterType="map">
 		insert into PM_PB_SECTION_TRAVEL_SUBSIDY(COMPANY_CODE,PRO_NO,SECTION_CODE,EMPLOYEECODE,TRACE_SUBSIDY,SYS_CREATE_TIME,SYS_PROCESS_FLAG,REMARKS)
		VALUES(#{companyCode},#{proNo},#{sectionCode},#{employeeCode},#{traceSubsidy},now(),'1',#{remarks})
 </insert>
 
 <insert id="insertSectionLabourCost" parameterType="java.util.List">
 	
 	insert into PM_PB_SECTION_LABOURCOST(COMPANY_CODE,PRO_NO,SECTION_CODE,EMPLOYEECODE,UNIVALENT,WORK_TIME,LABOUR_COST,SYS_CREATE_TIME,SYS_PROCESS_FLAG,BUDGET_CODE,VERSION_CODE,CONTRACT_PROPERTY_CODE,JOB_CODE,UNIT_CODE,SALARY_GRADE,SALARY_LEVEL)
	VALUES
 	<foreach collection="list" index="i" item="p" separator=",">
 		(#{p.companyCode},#{p.proNo},#{p.sectionCode},#{p.employeeCode},#{p.univalent},#{p.workTime},#{p.labourCost},now(),'1',#{p.budgetCode},#{p.versionCode},#{p.contractPropertyCode},#{p.jobCode},#{p.unitCode},#{p.salaryGrade},#{p.salaryLevel})
 	</foreach>
 </insert>
 
 <delete id="deleteTravelSubsidy">
 	   DELETE from PM_PB_SECTION_TRAVEL_SUBSIDY where employeecode=#{employeeCode} and company_code=#{companyCode} and pro_no=#{proNo} and SECTION_CODE=#{sectionCode}
 </delete>
 
 
 <delete id="deleteSectionLabourCost" parameterType="map">
 		DELETE from PM_PB_SECTION_LABOURCOST where company_code=#{companyCode} and pro_no=#{proNo}  and BUDGET_CODE=#{budgetCode} and VERSION_CODE=#{versionCode}
 </delete>
 
 
 <select id="getSectionLabourCost" parameterType="map" resultType="map">
 	
 	<!-- SELECT a.ROW_ID rowid,t2.employeeName,a.employeeCode,t2.job_no jobNo,ifnull(t2.SALARY_GRADE_NAME_PREFIX,'') gradeFix,
	a.LABOUR_COST labourCost,a.WORK_TIME workTime,IFNULL(t2.CONTRACT_PROPERTY_CODE,"") contractPropertyCode,
IFNULL(t2.CONTRACT_PROPERTY_NAME,"") propertyName,IFNULL(t2.JOB_NAME,"") jobName,
a.UNIVALENT univalent,a.SECTION_CODE sectionCode,t2.salaryGrade,t2.salaryLevel
	FROM PM_PB_SECTION_LABOURCOST a
	JOIN(select b.employeename,b.employeecode,b.job_no,h.SALARY_GRADE_NAME_PREFIX,b.CONTRACT_PROPERTY_CODE,
p.CONTRACT_PROPERTY_NAME,m.JOB_NAME,IFNULL(b.SALARY_GRADE,'') salaryGrade,IFNULL(b.SALARY_LEVEL,'') salaryLevel
from md_employee b 
	join md_org_unit u on u.UNIT_CODE=b.UNIT_CODE
left join md_employee_contract_property p on p.CONTRACT_PROPERTY_CODE=b.CONTRACT_PROPERTY_CODE
 left join md_employee_job m on m.JOB_CODE=b.JOB_CODE  
    left join HRM_SALARY_FRAMEWORK h on h.UNIT_CODE=u.UNIT_CODE and h.STATUS=2 ) t2
    on a.employeecode=t2.employeecode
    
	WHERE a.company_code=#{companyCode} and  a.BUDGET_CODE=#{budgetCode} and a.VERSION_CODE=#{versionCode} AND a.pro_no=#{proNo}
 
  -->
 
 	 	SELECT t.*,p.CONTRACT_PROPERTY_NAME propertyName,m.JOB_NAME jobName from(SELECT a.PRO_NO proNo,a.CONTRACT_PROPERTY_CODE contractPropertyCode,a.JOB_CODE jobCode,a.ROW_ID rowid,a.SECTION_CODE sectionCode,b.EMPLOYEENAME employeeName,b.EMPLOYEECODE employeeCode,a.UNIVALENT univalent,a.WORK_TIME workTime,a.LABOUR_COST labourCost,
  	IFNULL(a.UNIT_CODE,'') unitCode,IFNULL(a.SALARY_GRADE,'') salaryGrade,IFNULL(a.SALARY_LEVEL,'') salaryLevel,h.SALARY_GRADE_NAME_PREFIX gradeFix,u.unit_name unitName
	FROM PM_PB_SECTION_LABOURCOST a 
	left JOIN md_employee b ON a.employeecode=b.employeecode
  left join HRM_SALARY_FRAMEWORK h on h.UNIT_CODE=a.UNIT_CODE and h.STATUS=2
	JOIN PM_PB_BUDGET_SECTION c ON a.SECTION_CODE=c.SECTION_CODE
	left join md_org_unit u on u.UNIT_CODE=a.unit_code
	WHERE a.SYS_PROCESS_FLAG='1' AND a.pro_no=#{proNo} and a.COMPANY_CODE=#{companyCode} and  a.BUDGET_CODE=#{budgetCode} and a.VERSION_CODE=#{versionCode}) t
 left join md_employee_contract_property p on p.CONTRACT_PROPERTY_CODE=t.contractPropertyCode
 left join md_employee_job m on m.JOB_CODE=t.jobCode 
 
 
 </select>
 
 <select id="selectSectionLabourSumCost" parameterType="map" resultType="map">
 	SELECT a.SECTION_CODE sectionCode,SUM(a.UNIVALENT) univalent,SUM(a.WORK_TIME) workTime,ifnull(SUM(a.LABOUR_COST),0.0) cost
	FROM PM_PB_SECTION_LABOURCOST a
	JOIN PM_PB_BUDGET_SECTION c ON a.SECTION_CODE=c.SECTION_CODE
	WHERE a.COMPANY_CODE=#{companyCode} and  a.BUDGET_CODE=#{budgetCode} and a.VERSION_CODE=#{versionCode} AND a.pro_no=#{proNo}
	GROUP BY a.SECTION_CODE
	ORDER BY c.SECTION_ORDER
 </select>
 
 <insert id="insertProRollingBudget" parameterType="map">
 	insert into PM_PB_ROLLING_BUDGET(COMPANY_CODE,PRO_NO,PRO_NAME,BUDGET_CODE,SYS_CREATE_TIME,SYS_PROCESS_FLAG)
 	values(#{companyCode},#{proNo},#{proName},#{budgetCode},now(),'1')
 </insert>
 
 <insert id="insertProBudgetSections" parameterType="java.util.List">
 	insert into PM_PB_BUDGET_SECTION(COMPANY_CODE,PRO_NO,PRO_NAME,BUDGET_CODE,VERSION_CODE,SECTION_CODE,SECTION_START_TIME,
 	SECTION_END_TIME,SECTION_ORDER,SYS_CREATE_TIME,SYS_PROCESS_FLAG, SECTION_TYPE,READONLY)
 	values
 	<foreach collection="list" index="i" item="p" separator=",">
 	(#{p.companyCode},#{p.proNo},#{p.proName},#{p.budgetCode},#{p.versionCode},#{p.sectionCode},#{p.sectionStartTime},#{p.sectionEndTime},
 	#{p.sectionOrder},now(),'1',#{p.sectionType},#{p.readonly})
 	</foreach>
 </insert>
 
 <select id="selectProByNo" parameterType="map" resultType="map">
 	SELECT PRO_NO proNo,PRO_NAME proName,DATE_FORMAT(S_DATE,'%Y-%m-%d') sdate,DATE_FORMAT(E_DATE,'%Y-%m-%d') edate FROM PM_BASE 
 	WHERE COMPANY_CODE=#{companyCode} AND PRO_NO=#{proNo}
 </select>
 
 
<select id="selectProSectionEmployeeLabourCost" parameterType="map" resultType="map">
 	select SUM(TRACE_SUBSIDY) traceSubsidy from  PM_PB_SECTION_TRAVEL_SUBSIDY
	WHERE COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} and SECTION_CODE=#{sectionCode}
 </select>
 
 <select id="selectSectionLabourCost" parameterType="map" resultType="map">
 	select IFNULL(SUM(LABOUR_COST),0) labourCost from  PM_PB_SECTION_LABOURCOST
	WHERE COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} and SECTION_CODE=#{sectionCode}
	and BUDGET_CODE=#{budgetCode} and VERSION_CODE=#{versionCode}
 </select>
 
 <select id="selectProSectionLabourCostCountInItem" parameterType="map" resultType="int">
 	select count(*) from PM_PB_SECTION_ITEM_COST where COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} 
 	and SECTION_CODE=#{sectionCode} and ITEM_CODE='I038'
 </select>
 
  <select id="selectSectionLabourCostCountInItem" parameterType="map" resultType="int">
 	select count(*) from PM_PB_SECTION_ITEM_COST where COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} 
 	and SECTION_CODE=#{sectionCode} and ITEM_CODE='I031' and BUDGET_CODE=#{budgetCode} and VERSION_CODE=#{versionCode}
  </select>
 
 <update id="updatePlusProSectionItemLabourCost" parameterType="map">
 	update PM_PB_SECTION_ITEM_COST set COST=#{traceSubsidy},SYS_UPDATE_TIME=now() where COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} 
 	and SECTION_CODE=#{sectionCode} and ITEM_CODE='I038'
 </update>
 <update id="updateProSectionItemLabourCost" parameterType="map">
 	update PM_PB_SECTION_ITEM_COST set COST=#{labourCost},SYS_UPDATE_TIME=now() where COMPANY_CODE=#{companyCode} and PRO_NO=#{proNo} 
 	and SECTION_CODE=#{sectionCode} and ITEM_CODE='I031' and BUDGET_CODE=#{budgetCode} and VERSION_CODE=#{versionCode}
 </update>
  <insert id="insertProSectionItemLabourCost" parameterType="map">
 	insert into PM_PB_SECTION_ITEM_COST(COMPANY_CODE,PRO_NO,SECTION_CODE,ITEM_CODE,COST,SYS_CREATE_TIME,SYS_PROCESS_FLAG)
 	values(#{companyCode},#{proNo},#{sectionCode},'I038',#{traceSubsidy},now(),'1')
 </insert>
 
 <insert id="insertSectionItemLabourCost" parameterType="map">
 	insert into PM_PB_SECTION_ITEM_COST(COMPANY_CODE,PRO_NO,SECTION_CODE,ITEM_CODE,COST,SYS_CREATE_TIME,SYS_PROCESS_FLAG,BUDGET_CODE,VERSION_CODE)
 	values(#{companyCode},#{proNo},#{sectionCode},'I031',#{labourCost},now(),'1',#{budgetCode},#{versionCode})
 </insert>
 
 <insert id="insertBudgetVersion" parameterType="map">
 	insert into PM_PB_ROLLING_BUDGET_VERSION(COMPANY_CODE,PRO_NO,BUDGET_CODE,VERSION_CODE,VERSION_NO,VERSION_ORDER,
 	VERSION_STATUS,SYS_CREATE_TIME,SYS_PROCESS_FLAG)
 	values(#{companyCode},#{proNo},#{budgetCode},#{versionCode},#{versionNo},#{versionOrder},#{versionStatus},now(),'1')
 </insert>
 
 <!-- 以下是产生新版本预算的相关sql语句 -->
 <select id="selectWritableSection" parameterType="map" resultType="map">
 	SELECT COMPANY_CODE companyCode,PRO_NO proNo,PRO_NAME proName, BUDGET_CODE budgetCode, VERSION_CODE versionCode,SECTION_CODE sectionCode,
 	DATE_FORMAT(SECTION_START_TIME,'%Y-%m-%d') sectionStartTime,
	DATE_FORMAT(SECTION_END_TIME,'%Y-%m-%d') sectionEndTime,SECTION_ORDER sectionOrder,SECTION_TYPE sectionType
	FROM PM_PB_BUDGET_SECTION WHERE company_code=#{companyCode} 
	AND pro_no=#{proNo} AND BUDGET_CODE=#{budgetCode}
	AND VERSION_CODE=#{versionCode} AND READONLY=0
	<if test="sectionType != null and sectionType == 1">
	AND SECTION_TYPE=1
	</if>
	<if test="sectionType != null and sectionType != 1">
	AND SECTION_TYPE!=1
	</if>
	ORDER BY SECTION_ORDER
 </select>
 
 <update id="updateSectionReadonly" parameterType="map">
 	update PM_PB_BUDGET_SECTION set READONLY=1 where company_code=#{companyCode} 
	AND pro_no=#{proNo} AND BUDGET_CODE=#{budgetCode}
	AND VERSION_CODE=#{versionCode} AND SECTION_CODE=#{sectionCode}
 </update>
 
 <select id="selectVersionSection" parameterType="map" resultType="map">
 	select COMPANY_CODE companyCode,PRO_NO proNo,PRO_NAME proName,BUDGET_CODE budgetCode,VERSION_CODE versionCode,
 	SECTION_CODE sectionCode,DATE_FORMAT(SECTION_START_TIME,'%Y-%m-%d') sectionStartTime,READONLY readonly,
 	DATE_FORMAT(SECTION_END_TIME,'%Y-%m-%d') sectionEndTime,SECTION_ORDER sectionOrder,SECTION_TYPE sectionType
 	FROM PM_PB_BUDGET_SECTION WHERE company_code=#{companyCode} 
	AND pro_no=#{proNo} AND BUDGET_CODE=#{budgetCode}
	AND VERSION_CODE=#{versionCode}
	ORDER BY SECTION_ORDER
 </select>
 
 <select id="selectVersionByCode" parameterType="map" resultType="map">
 	select COMPANY_CODE companyCode,PRO_NO proNo,BUDGET_CODE budgetCode,VERSION_CODE versionCode,
 	VERSION_NO versionNo,VERSION_ORDER versionOrder,VERSION_STATUS versionStatus
 	from PM_PB_ROLLING_BUDGET_VERSION
 	where company_code=#{companyCode} AND pro_no=#{proNo} AND BUDGET_CODE=#{budgetCode} 
 	AND VERSION_CODE=#{versionCode}
 </select>
 
 <select id="selectVersionLabourCost" parameterType="map" resultType="map">
 	select COMPANY_CODE companyCode,BUDGET_CODE budgetCode,VERSION_CODE versionCode,PRO_NO proNo,SECTION_CODE sectionCode,
 	EMPLOYEECODE employeeCode,CONTRACT_PROPERTY_CODE contractPropertyCode,
 	JOB_CODE jobCode,UNIVALENT univalent,WORK_TIME workTime,LABOUR_COST labourCost,UNIT_CODE unitCode,SALARY_GRADE salaryGrade,SALARY_LEVEL salaryLevel
 	from PM_PB_SECTION_LABOURCOST
 	where company_code=#{companyCode} AND pro_no=#{proNo} AND BUDGET_CODE=#{budgetCode} 
 	AND VERSION_CODE=#{versionCode}
 </select>
 
 <select id="selectVersionItemCost" parameterType="map" resultType="map">
 	select COMPANY_CODE companyCode,PRO_NO proNo,BUDGET_CODE budgetCode,VERSION_CODE versionCode,SECTION_CODE sectionCode,
 	ITEM_CODE itemCode,COST cost
 	from PM_PB_SECTION_ITEM_COST
 	where company_code=#{companyCode} AND pro_no=#{proNo} AND BUDGET_CODE=#{budgetCode} 
 	AND VERSION_CODE=#{versionCode}
 </select>
 
 <insert id="batchInsertSectionLabourCost" parameterType="java.util.List">
 	insert into PM_PB_SECTION_LABOURCOST(COMPANY_CODE,PRO_NO,BUDGET_CODE,VERSION_CODE,SECTION_CODE,EMPLOYEECODE,
 	CONTRACT_PROPERTY_CODE,JOB_CODE,UNIVALENT,WORK_TIME,LABOUR_COST,SYS_CREATE_TIME,SYS_PROCESS_FLAG,UNIT_CODE,SALARY_GRADE,SALARY_LEVEL)
	VALUES
	<foreach collection="list" index="i" item="p" separator=",">
	(#{p.companyCode},#{p.proNo},#{p.budgetCode},#{p.versionCode},#{p.sectionCode},#{p.employeeCode},
	#{p.contractPropertyCode},#{p.jobCode},#{p.univalent},#{p.workTime},#{p.labourCost},now(),'1',#{p.unitCode},#{p.salaryGrade},#{p.salaryLevel})
	</foreach>
 </insert>
 
 <select id="getNewVersion" parameterType="map" resultType="map">
 	select BUDGET_CODE budgetCode,VERSION_CODE versionCode,VERSION_ORDER versionOrder,IFNULL(BUDGET_NO,'') budgetNo from PM_PB_ROLLING_BUDGET_VERSION 
	where PRO_NO=#{proNo} and COMPANY_CODE=#{companyCode}
	ORDER BY VERSION_ORDER DESC
 </select>
 
 <update id="updateVersion" parameterType="map">
 	  update PM_PB_ROLLING_BUDGET_VERSION set VERSION_STATUS=#{versionStatus},BUDGET_NO=#{budgetNo},SYS_UPDATE_TIME=now()
 	  WHERE PRO_NO=#{proNo} AND BUDGET_CODE=#{budgetCode} AND  VERSION_CODE=#{versionCode} AND COMPANY_CODE=#{companyCode}
 </update>
 
 <select id="selectProBudgetVersion" parameterType="map" resultType="map">
 	SELECT a.PRO_NO proNo,b.PRO_NAME proName,a.VERSION_NO versionNo,a.VERSION_STATUS versionStatus,a.BUDGET_CODE budgetCode,
	IFNULL(a.BUDGET_NO,'') budgetNo,IFNULL(DATE_FORMAT(a.SYS_UPDATE_TIME,'%Y-%m-%d'),'') sysUpdateTime,a.VERSION_CODE versionCode,c.PRO_CODE proCode
	FROM PM_PB_ROLLING_BUDGET_VERSION a
	JOIN PM_PB_ROLLING_BUDGET b ON a.BUDGET_CODE=b.BUDGET_CODE
	join PM_BASE c ON a.PRO_NO=c.PRO_NO
	WHERE b.PRO_NO=#{proNo} AND a.VERSION_STATUS!=0 
	ORDER BY VERSION_ORDER DESC
 </select>
 
 <select id="selectProBudgetVersionByCode" parameterType="map" resultType="map">
 	select BUDGET_CODE budgetCode,VERSION_CODE versionCode,VERSION_ORDER versionOrder,IFNULL(BUDGET_NO,'') budgetNo 
 	from PM_PB_ROLLING_BUDGET_VERSION
 	where VERSION_CODE=#{versionCode} and PRO_NO=#{proNo}
 </select>
 
</mapper>